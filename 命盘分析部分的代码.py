
    def 命盘分析(self, parent, 本命盘四个天干名字列表, 本命盘四个地支名字列表,性别):     #对命盘进行详细分析
        logger.debug("[BaziPlugin] 命盘分析界面开始")
            
        if not hasattr(self, '八字信息主字典'):  # 确保八字信息主字典已初始化
            self.八字信息主字典 = {}
            for 位置 in ['年干', '年支', '月干', '月支', '日干', '日支', '时干', '时支']:
                self.八字信息主字典[位置] = {'十神': None,'名字': None,'五行属性': None,'是否空亡': None,'正负属性': None,'力量数值': None,
                                    '忌用神归属': None,'外环境': None,'内环境': None,'阴阳属性': None,'旺弱状态': None}

        def 整理天干地支零碎的信息(self):
            #【基本信息提取】提取日主（me）和月支（month），并整理天干地支零碎的信息
            me = self.本命盘四个天干名字列表[2]
            self.me = me
            month = self.本命盘四个地支名字列表[1]
            alls = list(self.本命盘四个天干名字列表) + list(self.本命盘四个地支名字列表)

            #【天干十神计算】
            四个天干十神列表 = []
            for seq, item in enumerate(self.本命盘四个天干名字列表):  
                if seq == 2:
                    四个天干十神列表.append('--') 
                else:
                    try:
                        四个天干十神列表.append(十神关系表[me][item])
                    except KeyError:
                        logger.error(f"计算十神关系时出错，me={me}, item={item}")
                        四个天干十神列表.append('--')
            print("本命局里四个天干十神列表：", 四个天干十神列表)

            # 直接填充八字信息主字典的十神信息
            for i, 键 in enumerate(['年干', '月干', '日干', '时干']):
                self.八字信息主字典[键]['十神'] = 四个天干十神列表[i]


            # 假设在代码开始处已明确self.性别:
            is_male = (self.性别 == "男")  # True表示男性，False表示女性
            ba = self.ba    
            # 计算大运的方向


            # 获取年干在天干列表中的索引
            年干索引 = self.天干列表.index(self.本命盘四个天干名字列表[0])

            # 判断大运的顺逆方向，根据年干的阴阳属性和self.性别确定
            if is_male: # 男性
                if 年干索引 % 2 == 0:
                    direction = -1  # 阳年男逆排
                else:
                    direction = 1   # 阴年男顺排
            else:          # 女性
                if 年干索引 % 2 == 0:
                    direction = 1   # 阳年女顺排
                else:
                    direction = -1  # 阴年女逆排

            # 计算大运的具体内容
            # 获取月干和月支在天干列表和地支列表中的索引
            天干_序列 = self.天干列表.index(self.本命盘四个天干名字列表[1])      
            地支_序列 = self.地支列表.index(self.本命盘四个地支名字列表[1])   
            self.zhus = [item for item in zip(self.本命盘四个天干名字列表, self.本命盘四个地支名字列表)]

            for i in range(12):
                # 按照方向更新索引，并使用取模实现循环
                天干_序列 = (天干_序列 + direction) % 10
                地支_序列 = (地支_序列 + direction) % 12
                # 获取对应的大运天干和大运地支
                大运天干 = self.天干列表[天干_序列]
                大运地支 = self.地支列表[地支_序列]

            yun = ba.getYun(not is_male)

            for dayun in yun.getDaYun()[1:]:   
                大运天干 = dayun.getGanZhi()[0]     
                大运地支 = dayun.getGanZhi()[1]
                fu = '*' if (大运天干, 大运地支) in self.zhus else " "
                
                大运地支_ = set()             #创建一个空集合大运地支_，用于存储大运地支与本命盘地支的关系
                
                for item in self.本命盘四个地支名字列表:        #遍历 self.本命盘四个地支名字列表，也就是本命盘的四柱地支（年支、月支、日支、时支）
                
                    for type_ in 地支合会破刑害字典[大运地支]:      #遍历当前大运地支 大运地支 在 地支合会破刑害字典 字典《地支刑冲合害字典》中的关系
                        if item in 地支合会破刑害字典[大运地支][type_]:   #检查本命盘中的地支 item 是否与当前大运地支 大运地支 存在《地支刑冲合害字典》中的关系
                            大运地支_.add(type_ + ":" + item)  #如果存在关系，就将这个关系信息添加到 大运地支_ 集合中。格式为 "关系类型:地支"
                大运地支_ = '  '.join(大运地支_)   #最后大运地支_ 包含了当前大运地支与本命盘四柱地支之间所有的特殊关系（如刑、冲、合、害）的字符串大全（它可能看起来像这样："刑:寅  冲:申  合:酉  害:未"）
                
                empty = chr(12288)
                if 大运地支 in 地支空亡字典[self.zhus[2]]:  
                    empty = '地支空亡'        
                
                #《打印大运》
                jia = ""
                if 大运天干 in self.本命盘四个天干名字列表:
                    for i in range(4):
                        if 大运天干 == self.本命盘四个天干名字列表[i]:
                            if abs(self.地支列表.index(大运地支) - self.地支列表.index(self.本命盘四个地支名字列表[i])) == 2:
                                jia = jia + "  --夹：" +  self.地支列表[( self.地支列表.index(大运地支) + self.地支列表.index(self.本命盘四个地支名字列表[i]) )//2]
                            if abs(self.地支列表.index(大运地支) - self.地支列表.index(self.本命盘四个地支名字列表[i]) ) == 10:
                                jia = jia + "  --夹：" +  self.地支列表[(self.地支列表.index(大运地支) + self.地支列表.index(self.本命盘四个地支名字列表[i]))%12]
                age = dayun.getStartAge()
                流年天干 = 大运天干  # 当前大运天干
                流年地支 = 大运地支  # 当前大运地支
                empty = ""    # 空亡标记

                year_str = '📒大运'  
                ganzhi = dayun.getGanZhi()

                shi_shen = '--'
                if me in 十神关系表 and 大运天干 in 十神关系表[me]:
                    shi_shen = 十神关系表[me][大运天干]

                out = "{age:<3d}岁    {year:<7s}   {ganzhi:<5s}   {shi_shen}    {empty} {fu}    {gan}:{yinyang}   {zhi}:{yinyang}".format(
                    age=age, year=year_str, ganzhi=ganzhi,  shi_shen=shi_shen, empty=empty, fu=fu, gan=大运天干,  fill=chr(12288),
                    十神关系=十神关系表[me][大运天干],  # 改名为 干十神关系
                    yinyang=self.计算阴阳属性(大运地支), zhi=大运地支)
                print(out)


                zhis2 = list(self.本命盘四个地支名字列表) + [大运地支]      #计算每个大运中的流年
                gans2 = list(self.本命盘四个天干名字列表) + [大运天干]
                for liunian in dayun.getLiuNian():
                    流年天干 = liunian.getGanZhi()[0]     #获取流年的天干（流年天干）和地支（流年地支）
                    流年地支 = liunian.getGanZhi()[1]
                    fu2 = '*' if (流年天干, 流年地支) in self.zhus else " "  #检查这个干支组合是否与本命盘的四柱相同。如果相同，就标记一个星号，表示特殊的本命年
                    # 大运地地支作用关系
                    大运地支_ = set()
                    for item in zhis2:
                        for type_ in 地支合会破刑害字典[流年地支]:
                            if type_ == '破':
                                continue
                            if item in 地支合会破刑害字典[流年地支][type_]:
                                大运地支_.add(type_ + ":" + item)
                    大运地支_ = '  '.join(大运地支_)
                    #《打印流年》
                    empty = chr(12288)
                    if 流年地支 in 地支空亡字典[self.zhus[2]]:
                        empty = '地支空亡'       
                    age = liunian.getAge()
                    year_str = str(liunian.getYear())
                    ganzhi = 流年天干 + 流年地支
                    # 先计算十神
                    shi_shen = '--'
                    if me in 十神关系表 and 流年天干 in 十神关系表[me]:
                        shi_shen = 十神关系表[me][流年天干]
                    out = "{age:<3d}岁    {year:<7s}   {ganzhi:<5s}   {shi_shen}    {empty} {fu}     {gan}:{yinyang}      {zhi}:{yinyang}".format(
                        age=age, year=year_str, ganzhi=ganzhi, shi_shen=shi_shen,  empty=empty, fu=fu2, gan=流年天干, fill=chr(12288),
                        十神关系=十神关系表[me][流年天干],yinyang=self.计算阴阳属性(流年地支), zhi=流年地支)
                    print(out)
            return 四个天干十神列表, me, month
        



        四个天干十神列表, me, month = 整理天干地支零碎的信息(self)

        self.八字信息主字典 = {} 
        self.所有断语.clear()
        self.性别 = 性别
        地支_标签_列表 = []
        天干_十神_标签_列表 = []

        self.八字信息主字典 = {'年干': {}, '年支': {}, '月干': {}, '月支': {}, '日干': {}, '日支': {}, '时干': {}, '时支': {}}

        # 定义所有的一级键和二级键
        一级键列表 = ['年干', '年支', '月干', '月支', '日干', '日支', '时干', '时支']
        二级键列表 = ['十神', '名字', '五行属性', '是否空亡', '正负属性', '力量数值', '忌用神归属', '外环境', '内环境', '阴阳属性','旺弱状态']

        # 使用循环为每个一级键添加所有二级键
        for 一级键 in 一级键列表:
            for 二级键 in 二级键列表:
                self.八字信息主字典[一级键][二级键] = None              # 初始化所有值为 None

        # 添加十神信息
        for i, 键 in enumerate(['年干', '月干', '日干', '时干']):
            self.八字信息主字典[键]['十神'] = 四个天干十神列表[i]

        # 添加名字和五行属性
        for i, (干键, 支键) in enumerate(zip(['年干', '月干', '日干', '时干'], ['年支', '月支', '日支', '时支'])):
            self.八字信息主字典[干键]['名字'] = self.本命盘四个天干名字列表[i]
            self.八字信息主字典[干键]['五行属性'] = 十天干五行对照表[self.本命盘四个天干名字列表[i]]
            self.八字信息主字典[支键]['名字'] = self.本命盘四个地支名字列表[i]
            self.八字信息主字典[支键]['五行属性'] = 十二地支五行对照表[self.本命盘四个地支名字列表[i]]

        # 设置特定的正负属性
        for 键 in ['年干', '月干', '时干', '日支']:
            self.八字信息主字典[键]['正负属性'] = '零'

        # 设置空亡初始值
        for 键 in ['年支','月支','日支','时支']:
            self.八字信息主字典[键]['是否空亡'] = '否'

        # 设置力量数值
        for 一级键 in 一级键列表:
            self.八字信息主字典[一级键]['力量数值'] = 0  # 设置为数字 0

        #判断并设置阴阳属性
        for 一级键 in 一级键列表:
            名字 = self.八字信息主字典[一级键]['名字']
            if 一级键.endswith('干'):
                if 名字 in 十天干五行对照表:
                    self.八字信息主字典[一级键]['阴阳属性'] = self.计算阴阳属性(名字)
            elif 一级键.endswith('支'):
                if 名字 in 十二地支五行对照表:
                    self.八字信息主字典[一级键]['阴阳属性'] = self.计算阴阳属性(名字)  

        #先把"self.未现正偏十神主字典"完善起来，自成一派。代码块实现了"self.未现正偏十神主字典"里所有一级键的填充，也完成赋值了'十神'、'名字'、'五行属性'三个二级键
        十天干的名字列表 = ["甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸"]
        五个正十神列表大全 = ['正印', '正官', '正财', '劫财', '伤官'] 
        五个偏十神列表大全 = ['偏印(枭)', '七杀', '偏财', '比肩', '食神']
        年干十神 = 四个天干十神列表[0]  # 获取年干十神
        月干十神 = 四个天干十神列表[1]  # 获取月干十神
        时干十神 = 四个天干十神列表[3]  # 获取时干十神
        me = self.八字信息主字典['日干']['名字']      # 获取日干（第三个天干）
        self.未现正偏十神主字典 = {}
        self.实神虚神作用关系字典 = {} 

        月干和时干的十神信息列表 = [四个天干十神列表[1], 四个天干十神列表[3]]                                  # 获取月干🌕和时干⏰的十神，组成一个列表  （即使在没有匹配项时（命盘上面没有"已现正十神"或者没有"已现偏十神"）也会安全地返回空列表）
                                        
        已现正十神 = [shen for shen in 月干和时干的十神信息列表 if shen in 五个正十神列表大全]                   # 找出已现正十神（在月干和时干中）
        未现正十神 = [shen for shen in 五个正十神列表大全 if shen not in 已现正十神 and shen != 年干十神]    # 找出未现正十神（排除年干的十神）
        已现偏十神 = [shen for shen in 月干和时干的十神信息列表 if shen in 五个偏十神列表大全]                   # 已现偏十神
        未现偏十神 = [shen for shen in 五个偏十神列表大全 if shen not in 已现偏十神 and shen != 年干十神]   # 未现偏十神

        未现十神们及其天干名的字典 = {}      # 创建未现正十神及其对应的天干名的字典
        for 天干名 in 十天干的名字列表:
            shen = 十神关系表[me][天干名]      # 获取查询日主与当前天干的关系，推导出"未现正十神"的"十神"
            if shen in 未现正十神:
                未现十神们及其天干名的字典[shen] = 天干名     # 记录十神和对应的天干名
            if shen in 未现偏十神:
                未现十神们及其天干名的字典[shen] = 天干名     # 记录十神和对应的天干名

        for shen, 天干名 in 未现十神们及其天干名的字典.items():         # 遍历未现正十神，填充self.未现正偏十神主字典
            self.未现正偏十神主字典[天干名] = {'十神': shen,  '名字': 天干名,  '五行属性': 十天干五行对照表[天干名]}            #self.未现正偏十神主字典正式赋值完成



        def 元素间关系分析(self,一级键1, 一级键2):

            if 一级键1 in self.大运地支字典: 
                一级键1的子字典 = {'名字': 一级键1, '五行属性': 十二地支五行对照表[一级键1], '阴阳属性': self.大运地支字典[一级键1]['阴阳属性']}
            else:
                try:
                    一级键1的子字典 = self.八字信息主字典[一级键1]
                except KeyError:
                    一级键1的子字典 = self.未现正偏十神主字典.get(一级键1, None)  # 如果在self.八字信息主字典中找不到，则尝试从self.未现正偏十神主字典中获取

            if 一级键2 in self.大运地支字典:  
                一级键2的子字典 = {'名字': 一级键2, '五行属性': 十二地支五行对照表[一级键2], '阴阳属性': self.大运地支字典[一级键2]['阴阳属性']}
            else:
                try:
                    一级键2的子字典 = self.八字信息主字典[一级键2]
                except KeyError:
                    一级键2的子字典 = self.未现正偏十神主字典.get(一级键2, None)  # 如果在self.八字信息主字典中找不到，则尝试从self.未现正偏十神主字典中获取   

            def 查找二级键对应的一级键(self,键):
                for 柱, 信息 in self.八字信息主字典.items():
                    if 信息.get('名字') == 键:
                        return self.八字信息主字典[柱]
                return None

            if 一级键1的子字典 is None:
                一级键1的子字典 = 查找二级键对应的一级键(一级键1)
                if 一级键1的子字典 is None:
                    print(f"{一级键1}的值为空，无法分析关系。")
                    return None

            if 一级键2的子字典 is None:
                一级键2的子字典 = 查找二级键对应的一级键(一级键2)
                if 一级键2的子字典 is None:
                    print(f"{一级键2}的值为空，无法分析关系。")
                    return

            # 创建用于查找关系的元组
            临时元组 = (一级键1的子字典['名字'], 一级键2的子字典['名字'])

            # 查询特殊关系字典
            if 临时元组 in 晦脆冲特殊关系字典:
                两者关系 = 晦脆冲特殊关系字典[临时元组]   # 如果存在特殊关系，获取关系的值
            else:
                五行关系分析_临时元组 = (一级键1的子字典['五行属性'], 一级键2的子字典['五行属性'])
                两者关系 = 五行作用关系字典.get(五行关系分析_临时元组, '零')  # 默认关系为 '零'

            生扶受制关系概括 = '不旺不弱关系'

            if 两者关系 in ('同', '生', '旺'):
                生扶受制关系概括 = '生扶关系'
                正负属性 = '正'
                力量数值 = 51
            elif 两者关系 in ('克', '泄', '耗', '刑', '冲', '晦', '脆', '弱'):
                生扶受制关系概括 = '受制关系'
                正负属性 = '正'
                力量数值 = 51
            elif 两者关系 == '零':
                生扶受制关系概括 = '不旺不弱关系'
                正负属性 = '零'
                力量数值 = 0
                print(f"{一级键1的子字典['名字']} 是 {一级键2的子字典['名字']} 的墓库")

            else:
                print(f"警告：发现未处理的关系类型：{两者关系}")   # 如果出现了预期之外的关系值，打印出来以便调试

            # 判断一级键1和一级键2是否在self.八字信息主字典中
            一级键1是实神 = 一级键1的子字典 is not None
            一级键2是实神 = 一级键2的子字典 is not None

            if ('干' in 一级键1 and '干' in 一级键2) or ('支' in 一级键1 and '支' in 一级键2):
                if (一级键1是实神 and not 一级键2是实神) or (not 一级键1是实神 and 一级键2是实神):    # 一个实神一个虚神，存储到self.实神虚神作用关系字典
                    self.实神虚神作用关系字典[f'{一级键1}_{一级键2}_关系'] = {'关系': 两者关系, '概括': 生扶受制关系概括, '外环境': '', '内环境': ''}
                elif 一级键1是实神 and 一级键2是实神:    # 两个都是实神，存储到self.八字信息主字典
                    self.八字信息主字典[f'{一级键1}_{一级键2}_关系'] = {'关系': 两者关系, '概括': 生扶受制关系概括, '正负属性': 正负属性, '力量数值': 力量数值}
                else:
                    print("一级键1和一级键2无法作用")

            return 两者关系, 生扶受制关系概括, 正负属性, 力量数值
        



    #1. 看月支🌙
        #1.2 两干一支的分析

        # 调用 元素间关系分析 函数并获取返回值
        两者关系, 生扶受制关系概括, 正负属性, 力量数值 = self.元素间关系分析('月支', '日干')    # 1、获得"月支"🌙与【日干】👧🏻的关系

        self.八字信息主字典['月支']['力量数值'] = 力量数值     
        self.八字信息主字典['月支']['正负属性'] = 正负属性

        print(f"{'月支'} 和 {'日干'} 的关系为：{两者关系}，概括为：{生扶受制关系概括}")   
        print(f"月支🌙的力量值：属性 = {self.八字信息主字典['月支']['正负属性']}，力量数值 = {self.八字信息主字典['月支']['力量数值']}")    

        新的力量值 = self.八字信息主字典['月支']['力量数值']    # 初始化 新的力量值，默认值为当前的力量数值
        self.受制次数统计字典.setdefault('月支', 0)   # 如果 '月支' 不存在，则初始化为 0

        # 调用函数并获取返回值
        两者关系, 生扶受制关系概括, 正负属性, 力量数值 = self.元素间关系分析('年支', '月支')    # 2、获得"年支"🧨与"月支"🌙的关系。，查看"月支"是否受制了一次，如果受制一次，'力量数值'就更新为原先数值减去17（等于34）（特殊情况：如果元素间关系分析是'耗'，就不用减去17，'力量数值'继承之前的数值不变）。

        if 生扶受制关系概括 == '受制关系':
            self.受制次数统计字典['月支'] += 1                                # 无论关系为何，都增加受制次数
            if 两者关系 != '耗':                                       # 如果关系不是 '耗'
                旧的力量值 = self.八字信息主字典['月支']['力量数值']
                新的力量值 = 旧的力量值 - 17                             # 原力量值减去 17
                self.八字信息主字典['月支']['力量数值'] = 新的力量值
                print(f"年支🧨与月支🌙关系分析：月支🌙受制{self.受制次数统计字典['月支']}次，力量数值减17，现在是：{新的力量值}")
            else:
                当前_力量数值 = self.八字信息主字典['月支']['力量数值']    # 力量值不变，直接引用当前值
                print(f"年支🧨与月支🌙关系分析：月支🌙受制{self.受制次数统计字典['月支']}次，关系为'耗'，力量数值不变：{当前_力量数值}")
        else:
            print("年支🧨与月支🌙关系分析：月支🌙未受制，力量值不变。")


        self.受制次数统计字典.setdefault('月支', 0)          # 如果 '月支' 不存在于self.受制次数统计字典，则'月支'的受制次数初始化为 0
        两者关系, 生扶受制关系概括, 正负属性, 力量数值 = self.元素间关系分析('日支', '月支')    # 3、获得"日支"📅与"月支"🌙的关系。，查看"月支"是否受制了一次，如果又受制一次，'力量数值'就更新为原先数值再减去17（特殊情况：是'耗'，就不用减去17，'力量数值'不变）。

        if 生扶受制关系概括 == '受制关系':
            self.受制次数统计字典['月支'] += 1                        # 无论关系为何，都增加受制次数
            if 两者关系 != '耗':                                  # 如果关系不是 '耗'
                旧的力量值 = self.八字信息主字典['月支']['力量数值']
                新的力量值 = 旧的力量值 - 17                 # 原力量值减去 17
                self.八字信息主字典['月支']['力量数值'] = 新的力量值
                print(f"日支📅与月支🌙关系分析：月支🌙受制{self.受制次数统计字典['月支']}次，力量数值减去17，现在是：{新的力量值}")
            else:
                当前_力量数值 = self.八字信息主字典['月支']['力量数值']    # 力量值不变，直接引用当前值
                print(f"日支📅与月支🌙关系分析：月支🌙受制{self.受制次数统计字典['月支']}次，因为关系为'耗'(主克者不减力)，所以月支🌙力量数值现在是：{新的力量值}")
        else:
            print(f"纵观月支左右分析：月支🌙总共受制{self.受制次数统计字典['月支']}次，所以月支🌙力量数值现在是：{新的力量值}")

        
    #2. 看日支📅
    
        两者关系, 生扶受制关系概括, 正负属性, 力量数值 = self.元素间关系分析('日支', '日干')         # 第一步，分析日支📅和日干👧🏻的关系
        if 生扶受制关系概括 == '生扶关系':     # 根据关系更新日支的属性和力量数值
            self.八字信息主字典['日支']['正负属性'] = '正'
            self.八字信息主字典['日支']['力量数值'] = 15
        elif 生扶受制关系概括 == '受制关系':
            self.八字信息主字典['日支']['正负属性'] = '负'
            self.八字信息主字典['日支']['力量数值'] = 15
        elif 生扶受制关系概括 == '不旺不弱关系':
            self.八字信息主字典['日支']['正负属性'] = '零'
            self.八字信息主字典['日支']['力量数值'] = 0

        
        self.受制次数统计字典['日支'] = 0      # 第二步，初始化日支的受制次数为0
        两者关系, 生扶受制关系概括, 正负属性, 力量数值 = self.元素间关系分析('月支', '日支')       # 分析月支🌙和日支📅的关系
        if 生扶受制关系概括 == '受制关系':
            if 两者关系 != '耗':
                self.受制次数统计字典['日支'] += 1     
                self.八字信息主字典['日支']['力量数值'] -= 8        
            elif 两者关系 == '耗':
                self.受制次数统计字典['日支'] += 1

        两者关系, 生扶受制关系概括, 正负属性, 力量数值 = self.元素间关系分析('时支', '日支')       # 分析时支⌚️和日支📅的关系
        if 生扶受制关系概括 == '受制关系':
            if 两者关系 != '耗':
                self.受制次数统计字典['日支'] += 1    
                self.八字信息主字典['日支']['力量数值'] -= 8 
            elif 两者关系 == '耗':
                self.受制次数统计字典['日支'] += 1

        # 特殊情况，检查月支和日支的受制次数
        if self.受制次数统计字典['月支'] == 2 and self.受制次数统计字典['日支'] == 2:
            self.受制次数统计字典['月支'] = 1      # 月支受制次数更新为1次
            self.八字信息主字典['月支']['力量数值'] += 17       # 月支力量数值加回17
            print(f"月支🌙在步骤三时受制次数为：{self.受制次数统计字典['月支']}。力量数值为：{self.八字信息主字典['月支']['力量数值']}")

        #print(f"日支📅在步骤三时受制次数为：{self.受制次数统计字典['日支']}。属性为：{self.八字信息主字典['日支']['正负属性']}，力量数值为：{self.八字信息主字典['日支']['力量数值']}")



    # 3. 看月干🌕

        两者关系, 生扶受制关系概括, 正负属性, 力量数值 = self.元素间关系分析('月干', '日干')  # 分析月干🌕对日干👧🏻的关系
        print(f"月干与日干的关系: {两者关系}，概括为: {生扶受制关系概括}")       
        if 生扶受制关系概括 == '生扶关系':                # 根据关系更新月干的属性和力量数值
            self.八字信息主字典['月干']['正负属性'] = '正'
            self.八字信息主字典['月干']['力量数值'] = 15
        elif 生扶受制关系概括 == '受制关系':
            self.八字信息主字典['月干']['正负属性'] = '负'
            self.八字信息主字典['月干']['力量数值'] = 15
        elif 生扶受制关系概括 == '不旺不弱关系':
            self.八字信息主字典['月干']['正负属性'] = '零'
            self.八字信息主字典['月干']['力量数值'] = 15

        self.受制次数统计字典['月干'] = 0                # 初始化月干🌕的受制次数为0

        两者关系, 生扶受制关系概括, 正负属性, 力量数值 = self.元素间关系分析('月支', '月干')       # 分析月支🌙和月干🌕的关系

        if 生扶受制关系概括 == '受制关系':
            self.受制次数统计字典['月干'] += 1

        两者关系, 生扶受制关系概括, 正负属性, 力量数值 = self.元素间关系分析('年干', '月干')        # 分析年干🧨和月干🌕的关系

        if 生扶受制关系概括 == '受制关系':
            self.受制次数统计字典['月干'] += 1        



    # 4. 看时干⏰

        两者关系, 生扶受制关系概括, 正负属性, 力量数值 = self.元素间关系分析('时干', '日干')         # 分析时干⏰对日干👧🏻的关系
        if 生扶受制关系概括 == '生扶关系':
            self.八字信息主字典['时干']['正负属性'] = '正'
            self.八字信息主字典['时干']['力量数值'] = 10
        elif 生扶受制关系概括 == '受制关系' and 两者关系 != '耗':
            self.八字信息主字典['时干']['正负属性'] = '负'
            self.八字信息主字典['时干']['力量数值'] = 10
        elif 生扶受制关系概括 == '不旺不弱关系':
            self.八字信息主字典['时干']['正负属性'] = '零'
            self.八字信息主字典['时干']['力量数值'] = 0

        self.受制次数统计字典['时干'] = 0                # 初始化时干⏰的受制次数为0
        两者关系, 生扶受制关系概括, 正负属性, 力量数值 = self.元素间关系分析('时支', '时干')       # 分析时支⌚️和时干⏰的关系
        if 生扶受制关系概括 == '生扶关系':
            self.受制次数统计字典['时干'] += 1        # 受制次数加1
            self.八字信息主字典['时干']['力量数值'] += 10          # 力量数值加10

        #print(f"时干⏰在步骤五时受制次数为：{self.受制次数统计字典['时干']}。属性为：{self.八字信息主字典['时干']['正负属性']}，力量数值为：{self.八字信息主字典['时干']['力量数值']}")


    # 5. 同党查找
        # 获取元素的属性和力量数值，存入同党查找字典
        两干一支遍历列表 = ['月干', '日支', '时干']
        同党查找字典 = {}
        for 遍历列表的变量 in 两干一支遍历列表:
            正负属性 = self.八字信息主字典[遍历列表的变量]['正负属性']
            力量数值 = self.八字信息主字典[遍历列表的变量]['力量数值']
            if 力量数值 != 0:
                if 正负属性 not in 同党查找字典:
                    同党查找字典[正负属性] = []
                同党查找字典[正负属性].append(遍历列表的变量)

        # 处理月干🌙
        正负属性 = self.八字信息主字典['月干']['正负属性']
        if 正负属性 in 同党查找字典 and len(同党查找字典[正负属性]) > 1:
            self.八字信息主字典['月干']['力量数值'] += 10

        # 处理时干⏰
        正负属性 = self.八字信息主字典['时干']['正负属性']
        if 正负属性 in 同党查找字典 and len(同党查找字典[正负属性]) > 1:
            self.八字信息主字典['时干']['力量数值'] += 10

        # 处理日支📅
        正负属性 = self.八字信息主字典['日支']['正负属性']
        if 正负属性 in 同党查找字典 and len(同党查找字典[正负属性]) > 1:
            self.八字信息主字典['日支']['力量数值'] += 10

        # 确保力量数值在0到10之间
        for 遍历处理目标 in ['月干', '时干', '日支']:
            力量数值 = self.八字信息主字典[遍历处理目标]['力量数值']
            if 力量数值 > 10:
                self.八字信息主字典[遍历处理目标]['力量数值'] = 10
            elif 力量数值 < 0:
                self.八字信息主字典[遍历处理目标]['力量数值'] = 0

        # 分别打出最终的受制次数、属性和力量数值
        print(f"月干🌙最终受制次数：{self.受制次数统计字典['月干']},  属性：{self.八字信息主字典['月干']['正负属性']},  力量数值：{self.八字信息主字典['月干']['力量数值']}")
        print(f"时干⏰最终受制次数：{self.受制次数统计字典['时干']},  属性：{self.八字信息主字典['时干']['正负属性']},  力量数值：{self.八字信息主字典['时干']['力量数值']}")
        print(f"日支📅最终受制次数：{self.受制次数统计字典['日支']},  属性：{self.八字信息主字典['日支']['正负属性']},  力量数值：{self.八字信息主字典['日支']['力量数值']}")




    # 6. 本命盘的【格局判定】
        def 本命盘的格局判定():
            生扶力量总值 = sum(self.八字信息主字典[遍历列表的变量]['力量数值'] for 遍历列表的变量 in 同党查找字典.get('正', []))
            受制力量总值 = sum(self.八字信息主字典[遍历列表的变量]['力量数值'] for 遍历列表的变量 in 同党查找字典.get('负', []))
            if 生扶力量总值 > 受制力量总值:
                if 受制力量总值 == 0:
                    格局 = '从旺格局'
                    print("☯️本命局格局为：从旺格局")
                else:
                    格局 = '身旺格局'
                    print("☯️本命局格局为：身旺格局")
            elif 生扶力量总值 < 受制力量总值:
                if 生扶力量总值 == 0:
                    格局 = '从弱格局'
                    print("☯️本命局格局为：从弱格局")
                else:
                    格局 = '身弱格局'
                    print("☯️本命局格局为：身弱格局")
            return 格局
        格局 = 本命盘的格局判定()




    # 7. 日支🌳、月干🌕、时干⏰ 定用神/忌神

        def 判定用忌神(一级键1, 一级键2, 格局):
            # 调用元素间关系分析函数，获取生扶受制关系概括
            _, 生扶受制关系概括, _, _ = self.元素间关系分析(一级键1, 一级键2)
            
            # 初始化忌用神归属
            忌用神归属 = None
            
            # 根据格局和关系概括，判定忌用神归属
            if 格局 in ['从弱格局', '身旺格局']:
                if 生扶受制关系概括 == '生扶关系':
                    忌用神归属 = '忌神'
                elif 生扶受制关系概括 == '受制关系':
                    忌用神归属 = '用神'
            elif 格局 in ['从旺格局', '身弱格局']:
                if 生扶受制关系概括 == '生扶关系':
                    忌用神归属 = '用神'
                elif 生扶受制关系概括 == '受制关系':
                    忌用神归属 = '忌神'
            
            # 各回各家 各找各妈，更新相应字典—— 实神更新在"self.八字信息主字典"，虚神更新在"self.未现正偏十神主字典"。彻底避免了KeyError问题.
            if 忌用神归属:
                if 一级键1 in self.八字信息主字典:
                    self.八字信息主字典[一级键1]['忌用神归属'] = 忌用神归属
                elif 一级键1 in self.未现正偏十神主字典:
                    self.未现正偏十神主字典[一级键1]['忌用神归属'] = 忌用神归属
            
            # 返回忌用神归属
            return 忌用神归属

        # 调用判定用忌神函数，分别处理日支、月干、时干
        判定用忌神('日支', '日干', 格局)
        判定用忌神('月干', '日干', 格局)
        判定用忌神('时干', '日干', 格局)


        # 处理年干对月干的关系
        def 年干作用于月干():
            _, 生扶受制关系概括_年干对月干, _, _ = self.元素间关系分析('年干', '月干')
            月干忌用神归属 = self.八字信息主字典['月干'].get('忌用神归属')

            if 月干忌用神归属 == '用神':
                if 生扶受制关系概括_年干对月干 == '受制关系':
                    self.八字信息主字典['年干']['忌用神归属'] = '忌神'
                elif 生扶受制关系概括_年干对月干 == '生扶关系':
                    self.八字信息主字典['年干']['忌用神归属'] = '用神'
            elif 月干忌用神归属 == '忌神':
                if 生扶受制关系概括_年干对月干 == '受制关系':
                    self.八字信息主字典['年干']['忌用神归属'] = '用神'
                elif 生扶受制关系概括_年干对月干 == '生扶关系':
                    self.八字信息主字典['年干']['忌用神归属'] = '忌神'

            # 打印信息
            print("八字信息字典：")
            for 四干名称 in ['年干', '月干', '日支', '时干']:
                信息 = self.八字信息主字典.get(四干名称, {})
                名字 = 信息.get('名字', '')
                十神 = 信息.get('十神', '')
                忌用神归属 = 信息.get('忌用神归属', '')
                
                十神文本 = f"{十神}（{忌用神归属}）" if 忌用神归属 else 十神
                self.收集断语(f"{四干名称}: 名字 - 【{名字}】, 十神 - 【{十神文本}】, 忌用神归属 - 【{忌用神归属}】")
            return
        年干作用于月干()

        
        def 创建六亲对应字典(日干,性别):
            关系 = 十神关系表[日干]   # 获取日干的十神关系
            if self.性别 == "男":        # 根据self.性别判断六亲
                六亲字典 = {
                    '正印': {'六亲': '母亲', '天干名字': 关系.inverse['正印']},
                    '偏财': {'六亲': '父亲', '天干名字': 关系.inverse['偏财']},
                    '正财': {'六亲': '妻子', '天干名字': 关系.inverse['正财']},
                    '七杀': {'六亲': '儿子', '天干名字': 关系.inverse['七杀']},
                    '正官': {'六亲': '女儿', '天干名字': 关系.inverse['正官']},
                }
            else:  # self.性别为女
                六亲字典 = {
                    '偏印(枭)': {'六亲': '母亲', '天干名字': 关系.inverse['偏印(枭)']},
                    '正财': {'六亲': '父亲', '天干名字': 关系.inverse['正财']},
                    '正官': {'六亲': '丈夫', '天干名字': 关系.inverse['正官']},
                    '七杀': {'六亲': '男朋友', '天干名字': 关系.inverse['七杀']},
                    '食神': {'六亲': '女儿', '天干名字': 关系.inverse['食神']},
                    '伤官': {'六亲': '儿子', '天干名字': 关系.inverse['伤官']},
                }
            return 六亲字典
        
        日干 = self.八字信息主字典['日干']['名字']
        self.性别 = self.性别.get()
        六亲字典 = 创建六亲对应字典(日干, self.性别)




        # 8. 列出所有未现正十神和偏十神

        # 判断月干和时干是否为正十神或偏十神
        月干是正十神 = 月干十神 in 五个正十神列表大全
        时干是正十神 = 时干十神 in 五个正十神列表大全
        月干是偏十神 = 月干十神 in 五个偏十神列表大全
        时干是偏十神 = 时干十神 in 五个偏十神列表大全

        if (月干是正十神 and 时干是偏十神) or (月干是偏十神 and 时干是正十神):                 # 如果是“一正一偏”的情况  #8.1 处理偏正定位情况：当命盘里的月柱和时柱一个是正十神一个是偏十神
            def 处理偏正定位情况():
                已现正十神 = [shen for shen in 月干和时干的十神信息列表 if shen in 五个正十神列表大全]          
                未现正十神 = [shen for shen in 五个正十神列表大全 if shen not in 已现正十神 and shen != 年干十神]  
                已现偏十神 = [shen for shen in 月干和时干的十神信息列表 if shen in 五个偏十神列表大全]                
                未现偏十神 = [shen for shen in 五个偏十神列表大全 if shen not in 已现偏十神 and shen != 年干十神]  
                已现年干十神 = self.八字信息主字典['年干']['十神']
                未现正十神 = [shen for shen in 五个正十神列表大全 if shen not in 已现正十神 + [已现年干十神]] 

                for 天干名 in 十天干的名字列表:
                    shen = 十神关系表[me][天干名]
                    if shen in 未现正十神 or shen in 未现偏十神:
                        if 天干名 not in self.未现正偏十神主字典:
                            self.未现正偏十神主字典[天干名] = {}
                        self.未现正偏十神主字典[天干名].update({
                            '名字': 天干名,
                            '十神': shen,
                            '五行属性': 十天干五行对照表[天干名],
                            '阴阳属性': '阳' if 天干名 in self.阳属性天干列表 else '阴',
                            '窗口名字': '',
                            '窗口位置': '',
                            '窗口十神': '',
                            '忌用神归属': '',
                            '外环境': '',
                            '内环境': '',
                            '是否有镜像': ''
                        })
        

                for 天干名, 值 in self.未现正偏十神主字典.items():
                    for 新加的二级键 in ['窗口名字', '窗口十神', '窗口位置', '忌用神归属', '外环境', '内环境']:       # 为self.未现正偏十神主字典添加新的二级键
                        if 新加的二级键 not in 值:
                            值[新加的二级键] = None

                #在函数内重新生成未现正十神们及其天干名的字典
                未现正十神们及其天干名的字典 = {}     
                for 天干名 in 十天干的名字列表:
                    shen = 十神关系表[me][天干名]     
                    if shen in 未现正十神:
                        未现正十神们及其天干名的字典[shen] = 天干名     # 记录十神和对应的天干名

                # 9.1.1 找到未现正十神
                已现正十神索引 = [i for i in [1, 3] if 四个天干十神列表[i] in 已现正十神]               # 查找已现正十神在[月干🌕]或[时干⏰]中的索引  （之所以用索引这样的设计，是为了想让每一个已现正十神的天干名字和十神名字 一一对应起来）
                if 已现正十神索引:               # 如果存在已现正十神，更新"未现正十神"的值    #翻译：“如果 已现正十神索引 不为空则：”
                    for 索引_正 in 已现正十神索引:
                        四柱列表 = ['年干', '月干', '日干', '时干']
                        已现正十神天干 = self.八字信息主字典[四柱列表[索引_正]]['名字']
                        函数内已现正十神 = 四个天干十神列表[索引_正]          #翻译：已现正十神 的名字是这两个（如： '正印','正官'）
                        for 天干名, 值 in self.未现正偏十神主字典.items():
                            if 值['十神'] in 未现正十神:
                                值['窗口名字'] = 已现正十神天干
                                值['窗口十神'] = 函数内已现正十神
                                值['忌用神归属'] = 判定用忌神(天干名, '日干', 格局)
                                for 位置 in ['年干', '月干', '日干', '时干']:   # 通过十神和天干名双重匹配来定位窗口位置
                                    if self.八字信息主字典[位置]['名字'] == 已现正十神天干 and self.八字信息主字典[位置]['十神'] == 函数内已现正十神:
                                        值['窗口位置'] = 位置
                                        break

                    print("未在命盘上显示的【正十神】：" + ', '.join(f"{属性字典['十神']}→{天干名}" for 天干名, 属性字典 in self.未现正偏十神主字典.items() if 属性字典['十神'] in 未现正十神))

                else:   # 如果不存在已现正十神，提示信息
                    print("这个命局里，不是“一正一偏”的情况，本命局适用于“处理非偏正定位情况”的推导方式🧐")



                # 9.1.2 找到未现偏十神
                未现偏十神们及其天干名的字典 = {}     
                for 天干名 in 十天干的名字列表:
                    shen = 十神关系表[me][天干名]     
                    if shen in 未现偏十神:
                        未现偏十神们及其天干名的字典[shen] = 天干名    
                已现偏十神索引 = [i for i in [1, 3] if 四个天干十神列表[i] in 已现偏十神]               # 查找已现偏十神在[月干🌕]或[时干⏰]中的索引  （之所以用索引这样的设计，是为了想让每一个已现偏十神的天干名字和十神名字 一一对应起来）

                if 已现偏十神索引:               # 如果存在已现偏十神，更新"未现偏十神"的值    #翻译：“如果 已现偏十神索引 不为空则：”
                    for 索引_偏 in 已现偏十神索引:
                        四柱列表 = ['年干', '月干', '日干', '时干'] 
                        已现偏十神天干 = self.八字信息主字典[四柱列表[索引_偏]]['名字']     
                        函数内已现偏十神 = 四个天干十神列表[索引_偏]          #翻译：已现偏十神 的名字是这两个（如： '偏印','七杀'）

                        for 天干名, 值 in self.未现正偏十神主字典.items():
                            if 值['十神'] in 未现偏十神:
                                值['窗口名字'] = 已现偏十神天干
                                值['窗口十神'] = 函数内已现偏十神
                                值['忌用神归属'] = 判定用忌神(天干名, '日干', 格局)
                                for 位置 in ['年干', '月干', '日干', '时干']:   # 通过十神和天干名双重匹配来定位窗口位置
                                    if self.八字信息主字典[位置]['名字'] == 已现偏十神天干 and self.八字信息主字典[位置]['十神'] == 函数内已现偏十神:
                                        值['窗口位置'] = 位置
                                        break
                    
                    print("未在命盘上显示的【偏十神】：" + ', '.join(f"{属性字典['十神']}→{天干名}" for 天干名, 属性字典 in self.未现正偏十神主字典.items() if 属性字典['十神'] in 未现偏十神))
                else:   # 如果不存在已现偏十神，提示信息
                    print("这个命局里，不是“一正一偏”的情况，本命局适用于“处理非偏正定位情况”的推导方式🧐")
                pass
            处理偏正定位情况()

        elif (月干是正十神 and 时干是正十神) or (月干是偏十神 and 时干是偏十神):             #双正或双偏的情况   #8.2 处理非偏正定位情况：当命盘里的月柱和时柱两个都是正十神 or 两个都是偏十神（即：两都正or两都偏）
            def 双正或双偏的情况下找未现正偏十神的办法(找正十神的窗口, 找偏十神的窗口):
                    # 获取已现的正十神和偏十神
                    已现正十神 = [shen for shen in 月干和时干的十神信息列表 if shen in 五个正十神列表大全]          
                    未现正十神 = [shen for shen in 五个正十神列表大全 if shen not in 已现正十神 and shen != 年干十神]  
                    已现偏十神 = [shen for shen in 月干和时干的十神信息列表 if shen in 五个偏十神列表大全]                
                    未现偏十神 = [shen for shen in 五个偏十神列表大全 if shen not in 已现偏十神 and shen != 年干十神] 
                    已现年干十神 = self.八字信息主字典['年干']['十神']
                    # 寻找未现的正十神
                    未现正十神 = [shen for shen in 五个正十神列表大全 if shen not in 已现正十神 + [已现年干十神]]     # 找到未现的正十神
                    十神与天干的对应关系字典 = {}
                    for 天干名 in 十天干的名字列表:
                        当前十神 = 十神关系表[me][天干名]  # 获取日主与当前天干的十神关系
                        if 当前十神 in 未现正十神:
                            十神与天干的对应关系字典[当前十神] = 天干名  # 记录十神和对应的天干

                    if 未现正十神:         # 在self.未现正偏十神主字典中添加信息
                        for 未现十神 in 未现正十神:
                            天干 = 十神与天干的对应关系字典.get(未现十神, "")
                            self.未现正偏十神主字典[天干] = {'十神': 未现十神,'名字': 天干,'五行属性': 十天干五行对照表[天干],'阴阳属性': '阳' if 天干 in self.阳属性天干列表 else '阴','忌用神归属': 判定用忌神(天干, '日干', 格局),'窗口名字': '','窗口位置': '','窗口十神': '','外环境': '','内环境': '','是否有镜像': ''}
                            已现正十神的天干 = self.八字信息主字典[找正十神的窗口]['名字']            # 获取已现正十神的天干和十神
                            已现正十神的十神 = self.八字信息主字典[找正十神的窗口]['十神']
                            self.未现正偏十神主字典[天干]['窗口名字'] = 已现正十神的天干
                            self.未现正偏十神主字典[天干]['窗口十神'] = 已现正十神的十神
                            self.未现正偏十神主字典[天干]['窗口位置'] = 找正十神的窗口
                            if ((self.性别 == "男" and 找正十神的窗口 == '时干') or (self.性别 == "女" and 找正十神的窗口 == '时干')):
                                self.未现正偏十神主字典[天干]['是否有镜像'] = '有镜像'
                    # 寻找未现的偏十神
                    未现偏十神 = [未现十神 for 未现十神 in 五个偏十神列表大全 if 未现十神 not in 已现偏十神 + [已现年干十神]]     # 找到未现的偏十神
                    偏十神与天干的对应关系字典 = {}
                    for 天干名 in 十天干的名字列表:
                        当前十神 = 十神关系表[me][天干名]
                        if 当前十神 in 未现偏十神:
                            偏十神与天干的对应关系字典[当前十神] = 天干名

                    if 未现偏十神:    # 在self.未现正偏十神主字典中添加信息
                        for 未现十神 in 未现偏十神:
                            天干 = 偏十神与天干的对应关系字典.get(未现十神, "")
                            self.未现正偏十神主字典[天干] = {'十神': 未现十神,'名字': 天干,'五行属性': 十天干五行对照表[天干],'忌用神归属': 判定用忌神(天干, '日干', 格局),'窗口名字': '','窗口位置': '','窗口十神': '','外环境': '','内环境': '','是否有镜像': ''}
                            已现偏十神的天干 = self.八字信息主字典[找偏十神的窗口]['名字']             # 获取已现偏十神的天干和十神
                            已现偏十神的十神 = self.八字信息主字典[找偏十神的窗口]['十神']
                            self.未现正偏十神主字典[天干]['窗口名字'] = 已现偏十神的天干     # 更新未现偏十神的窗口信息
                            self.未现正偏十神主字典[天干]['窗口十神'] = 已现偏十神的十神
                            self.未现正偏十神主字典[天干]['窗口位置'] = 找偏十神的窗口
                            if ((self.性别 == "男" and 找偏十神的窗口 == '时干') or (self.性别 == "女" and 找偏十神的窗口 == '月干')):
                                self.未现正偏十神主字典[天干]['是否有镜像'] = '有镜像'
                    return self.未现正偏十神主字典
            def 处理非偏正定位情况():   
                if self.性别 == "男":
                    双正或双偏的情况下找未现正偏十神的办法('月干', '时干')      # 男：月干🌕为未出现正十神的窗口，时干⏰为未出现偏十神的窗口
                elif self.性别 == "女":
                    双正或双偏的情况下找未现正偏十神的办法('时干', '月干')      # 女：月干🌕为未出现偏十神的窗口，时干⏰为未出现正十神的窗口
                else:
                    print("这个命局，不是双正或双偏的情况，本命局适用于其他推导方式🧐")
            处理非偏正定位情况()  # 调用处理非偏正定位情况的函数







        #9. 天干十神的外环境吉凶和内环境定吉凶（加上大运流年关系）
        生扶列表 = ['同', '生']
        受制列表 = ['克', '泄', '耗', '刑', '冲', '晦', '脆', '零']



        # 9.1 分析天干十神的外环境吉凶
        def 分析天干十神的外环境吉凶():
            外环境结论 = {}
            # 分析时干⏰ 和 月干🌕 的外环境吉凶
            for 位置, 索引 in [('时干', 3), ('月干', 1)]:
                十神 = 四个天干十神列表[索引]
                忌用神归属 = self.八字信息主字典[位置].get('忌用神归属')
                天干名 = self.八字信息主字典[位置]['名字']

                if 忌用神归属 == '用神':
                    self.八字信息主字典[位置]['外环境'] = '吉'
                elif 忌用神归属 == '忌神':
                    self.八字信息主字典[位置]['外环境'] = '凶'
                
                作用链路过程 = f"🔍「已现十神の外环境」推导过程：∵【{位置}】【{天干名}】【{十神}】为【{忌用神归属}】，∴ 【{位置}】【{天干名}】【{十神}】【{忌用神归属}】外环境为【{self.八字信息主字典[位置]['外环境']}】"
                self.收集断语(作用链路过程)
                print(作用链路过程)

                # 在循环内部就保存结论
                外环境结论[位置] = {'外环境': self.八字信息主字典[位置]['外环境'],
                    '作用路径': f"∵【{位置}】【{天干名}】【{十神}】为【{忌用神归属}】，∴ 【{位置}】【{天干名}】【{十神}】【{忌用神归属}】外环境为【{self.八字信息主字典[位置]['外环境']}】"}


            # 分析年干🧨 的外环境吉凶
            月干忌用神归属 = self.八字信息主字典['月干'].get('忌用神归属')
            # 判断月干对年干🧨是否生扶
            年干对月干的生扶受制关系 = self.判断两者是否生扶受制('年干', '月干')
            if 月干忌用神归属: 
                if 月干忌用神归属 == '用神':
                    if 年干对月干的生扶受制关系 == '生扶关系':
                        self.八字信息主字典['年干']['忌用神归属'] = '用神'
                        self.八字信息主字典['年干']['外环境'] = '吉'
                    elif 年干对月干的生扶受制关系 == '受制关系'or 年干对月干的生扶受制关系 == '不旺不弱关系':
                        self.八字信息主字典['年干']['忌用神归属'] = '忌神'
                        self.八字信息主字典['年干']['外环境'] = '凶'
                    else:
                        self.八字信息主字典['年干']['外环境'] = '不旺不弱，既不吉也不凶'
                elif 月干忌用神归属 == '忌神':
                    if 年干对月干的生扶受制关系 == '生扶关系':
                        self.八字信息主字典['年干']['忌用神归属'] = '忌神'
                        self.八字信息主字典['年干']['外环境'] = '凶'
                    elif 年干对月干的生扶受制关系 == '受制关系'or 年干对月干的生扶受制关系 == '不旺不弱关系':
                        self.八字信息主字典['年干']['忌用神归属'] = '用神'
                        self.八字信息主字典['年干']['外环境'] = '吉'
                    else:
                        self.八字信息主字典['年干']['外环境'] = '不旺不弱，既不吉也不凶'
                else:
                    self.八字信息主字典['年干']['外环境'] = '外环境被作用关系不旺不弱关系，既不吉也不凶'
        
            年干忌用神归属 = self.八字信息主字典['年干'].get('忌用神归属')
            月干忌用神归属 = self.八字信息主字典['月干'].get('忌用神归属')
            月干名 = self.八字信息主字典['月干']['名字']
            年干名 = self.八字信息主字典['年干']['名字']
            月干十神 = 四个天干十神列表[1]

            作用链路过程 = f"🔍「已现十神の外环境」推导过程：∵【年干】【{年干对月干的生扶受制关系}】【月干】【{月干十神}】， ∵【{月干名}】【{月干十神}】为【{年干忌用神归属}】。 ∴ 【年干】【{年干名}】【{十神}】外环境为【{self.八字信息主字典['年干']['外环境']}】"
            self.收集断语(作用链路过程)
            print(作用链路过程)
            

            外环境结论['年干'] = {
                '外环境': self.八字信息主字典['年干']['外环境'],
                '作用路径': f"∵【年干】【{年干对月干的生扶受制关系}】【月干】【{月干十神}】， ∵【{月干名}】【{月干十神}】为【{年干忌用神归属}】。 ∴ 【年干】【{年干名}】【{十神}】外环境为【{self.八字信息主字典['年干']['外环境']}】"}
        
            return 外环境结论
        分析天干十神的外环境吉凶()

        # 9.2 分析天干十神的内环境吉凶
        def 分析天干十神的内环境吉凶():
            for idx, 干名, 十神 in zip([3, 1, 0], ['时干', '月干', '年干'], [时干十神, 月干十神, 年干十神]):
                天干名字 = self.本命盘四个天干名字列表[idx]
                地支名字 = self.本命盘四个地支名字列表[idx]

                # 判断是否有根
                if (地支名字, 天干名字) in 有根字典 and 有根字典[(地支名字, 天干名字)] == '有根':
                    有根 = True
                else:
                    天干五行 = 十天干五行对照表.get(天干名字)
                    地支五行 = 十二地支五行对照表.get(地支名字)
                    if 天干五行 and 地支五行:
                        if (地支名字, 天干名字) in 晦脆冲特殊关系字典:
                            两者关系 = 晦脆冲特殊关系字典[(地支名字, 天干名字)]
                        else:
                            两者关系 = 五行作用关系字典.get((天干五行, 地支五行), '')
                        有根 = 两者关系 in 生扶列表
                    else:
                        有根 = False

                if 有根:
                    self.八字信息主字典[干名]['是否有根'] = '有根'

                # 根据有根与忌用神归属，确定内环境吉凶
                忌用神归属 = self.八字信息主字典[干名].get('忌用神归属')
                if 忌用神归属 == '用神':
                    if 有根:
                        self.八字信息主字典[干名]['内环境'] = '吉'
                    else:
                        self.八字信息主字典[干名]['内环境'] = '凶'
                elif 忌用神归属 == '忌神':
                    if 有根:
                        self.八字信息主字典[干名]['内环境'] = '凶'
                    else:
                        self.八字信息主字典[干名]['内环境'] = '吉'
                else:
                    self.八字信息主字典[干名]['内环境'] = '既不吉也不凶'

                作用链路过程 = f"🔍「已现十神の内环境」推导过程： ∵【{干名}】【{self.八字信息主字典[干名]['名字']}】【{'有根' if self.八字信息主字典[干名].get('是否有根') == '有根' else '无根'}】且为【{忌用神归属}】，∴【{干名}】【{十神}】【{忌用神归属}】的内环境为【{self.八字信息主字典[干名]['内环境']}】"
                self.收集断语(作用链路过程)
                print(作用链路过程)

            内环境结论 = {'时干': {
                '内环境': self.八字信息主字典['时干']['内环境'],
                '作用路径': f"【时干】【{self.八字信息主字典['时干']['名字']}】【{'有根' if self.八字信息主字典['时干'].get('是否有根') == '有根' else '无根'}】且为【{self.八字信息主字典['时干'].get('忌用神归属')}】"},
            '月干': {
                '内环境': self.八字信息主字典['月干']['内环境'],
                '作用路径': f"【月干】【{self.八字信息主字典['月干']['名字']}】【{'有根' if self.八字信息主字典['月干'].get('是否有根') == '有根' else '无根'}】且为【{self.八字信息主字典['月干'].get('忌用神归属')}】"},
            '年干': {
                '内环境': self.八字信息主字典['年干']['内环境'],
                '作用路径': f"【年干】【{self.八字信息主字典['年干']['名字']}】【{'有根' if self.八字信息主字典['年干'].get('是否有根') == '有根' else '无根'}】且为【{self.八字信息主字典['年干'].get('忌用神归属')}】"}}
            
            for 干名 in ['时干', '月干', '年干']:
                self.八字信息主字典[干名].update({'内环境': 内环境结论[干名]['内环境']})   # 更新到self.八字信息主字典中
            return 内环境结论
        分析天干十神的内环境吉凶()

        #9.3 分析天干十神的左环境吉凶
        def 分析天干十神的左环境吉凶():
            # 分析时干 🕰️ 的左环境吉凶
            时干忌用神归属 = self.八字信息主字典['时干'].get('忌用神归属')
            生扶受制关系 = self.判断两者是否生扶受制('日干', '时干')
            if 时干忌用神归属 == '用神':
                if 生扶受制关系 == '生扶关系':
                    self.八字信息主字典['时干']['左环境'] = '吉'
                elif 生扶受制关系 == '受制关系'or 生扶受制关系 == '不旺不弱关系':
                    self.八字信息主字典['时干']['左环境'] = '凶'
                else:  # 不旺不弱关系
                    self.八字信息主字典['时干']['左环境'] = '外环境被作用关系不旺不弱关系，既不吉也不凶'
            elif 时干忌用神归属 == '忌神':
                if 生扶受制关系 == '生扶关系':
                    self.八字信息主字典['时干']['左环境'] = '凶'
                elif 生扶受制关系 == '受制关系'or 生扶受制关系 == '不旺不弱关系':
                    self.八字信息主字典['时干']['左环境'] = '吉'
                else:  # 不旺不弱关系
                    self.八字信息主字典['时干']['左环境'] = '外环境被作用关系不旺不弱关系，既不吉也不凶'


            # 分析月干🌕 的左环境吉凶
            月干忌用神归属 = self.八字信息主字典['月干'].get('忌用神归属')
            生扶受制关系 = self.判断两者是否生扶受制('年干', '月干')
            if 月干忌用神归属 == '用神':
                if 生扶受制关系 == '生扶关系':
                    self.八字信息主字典['月干']['左环境'] = '吉'
                elif 生扶受制关系 == '受制关系'or 生扶受制关系 == '不旺不弱关系':
                    self.八字信息主字典['月干']['左环境'] = '凶'
                else:  # 不旺不弱关系
                    self.八字信息主字典['月干']['左环境'] = '外环境被作用关系不旺不弱关系，既不吉也不凶'
            elif 月干忌用神归属 == '忌神':
                if 生扶受制关系 == '生扶关系':
                    self.八字信息主字典['月干']['左环境'] = '凶'
                elif 生扶受制关系 == '受制关系'or 生扶受制关系 == '不旺不弱关系':
                    self.八字信息主字典['月干']['左环境'] = '吉'
                else:  # 不旺不弱关系
                    self.八字信息主字典['月干']['左环境'] = '外环境被作用关系不旺不弱关系，既不吉也不凶'


            # 分析年干 🧨 的左环境吉凶
            年干忌用神归属 = self.八字信息主字典['年干'].get('忌用神归属')
            if 年干忌用神归属:
                月干生扶年干 = self.判断两者是否生扶受制('月干', '年干') == '生扶关系'
                日干生扶月干 = self.判断两者是否生扶受制('日干', '月干') == '生扶关系'
                月干制年干 = self.判断两者是否生扶受制('月干', '年干') in ['受制关系', '不旺不弱关系']
                日干制月干 = self.判断两者是否生扶受制('日干', '月干') in ['受制关系', '不旺不弱关系']

                if 年干忌用神归属 == '用神':
                    if 月干生扶年干 and 日干生扶月干:
                        self.八字信息主字典['年干']['左环境'] = '吉'
                    elif (月干生扶年干 and 日干制月干) or (月干制年干 and 日干生扶月干):
                        self.八字信息主字典['年干']['左环境'] = '凶'
                    else:
                        self.八字信息主字典['年干']['左环境'] = '吉'
                elif 年干忌用神归属 == '忌神':
                    if 月干生扶年干 and 日干生扶月干:
                        self.八字信息主字典['年干']['左环境'] = '凶'
                    elif (月干生扶年干 and 日干制月干) or (月干制年干 and 日干生扶月干):
                        self.八字信息主字典['年干']['左环境'] = '吉'
                    else:
                        self.八字信息主字典['年干']['左环境'] = '凶'
            else:
                self.八字信息主字典['年干']['左环境'] = '外环境被作用关系不旺不弱关系，既不吉也不凶'

            # 打印结果
            环境类型字典 = {}
            for 天干 in ['时干', '月干', '年干']:
                十神 = self.八字信息主字典.get(天干).get('十神')
                忌用神归属 = self.八字信息主字典.get(天干).get('忌用神归属')
                左环境 = self.八字信息主字典.get(天干).get('左环境')
                是正十神 = 十神 in ['正官', '正印', '正财', '伤官', '劫财']
                if (self.性别 == '男' and 是正十神) or (self.性别 == '女' and not 是正十神):
                    环境类型字典[天干] = "社会环境"
                else:
                    环境类型字典[天干] = "内心环境"
                
                作用链路过程 =f"🔍{天干}: {十神} - {忌用神归属} - 左环境：{左环境} - {环境类型字典[天干]}:{左环境}"
                self.收集断语(作用链路过程)
                print(作用链路过程)
            
                # 添加推导过程的打印
                时干名字 = self.八字信息主字典['时干']['名字']
                时干十神 = self.八字信息主字典['时干']['十神']
                月干名字 = self.八字信息主字典['月干']['名字']
                月干十神 = self.八字信息主字典['月干']['十神']
                年干名字 = self.八字信息主字典['年干']['名字']
                年干十神 = self.八字信息主字典['年干']['十神']

                日时关系 = "生" if self.判断两者是否生扶受制('日干', '时干') == '生扶关系' else "制"
                年月关系 = "生" if self.判断两者是否生扶受制('年干', '月干') == '生扶关系' else "制"
                日干月干关系 = "生" if 日干生扶月干 else "制"
                月干年干关系 = "生" if 月干生扶年干 else "制"
                if 天干 == '时干':
                    作用链路过程 =f"🔍「已现十神の左环境」推导过程：【日干】【{self.八字信息主字典['日干']['名字']}】【{日时关系}】【时干】【{时干名字}】【{时干十神}】，∴【{时干名字}】【{时干十神}】的左环境（{环境类型字典[天干]}）【{self.八字信息主字典['时干']['左环境']}】"
                    self.收集断语(作用链路过程)
                    print(作用链路过程)
                elif 天干 == '月干':
                    作用链路过程 =f"🔍「已现十神の左环境」推导过程：【年干】【{年干名字}】【{年干十神}】【{年月关系}】【月干】【{月干名字}】【{月干十神}】，∴【{月干名字}】【{月干十神}】的左环境（{环境类型字典[天干]}）【{self.八字信息主字典['月干']['左环境']}】"
                    self.收集断语(作用链路过程)
                    print(作用链路过程)
                elif 天干 == '年干':
                    作用链路过程 =f"🔍「已现十神の左环境」推导过程：【日干】【{self.八字信息主字典['日干']['名字']}】【{日干月干关系}】【月干】【{月干名字}】【{月干十神}】，【月干】【{月干名字}】【{月干十神}】【{月干年干关系}】【年干】【{年干名字}】【{年干十神}】，∴【{年干名字}】【{年干十神}】的左环境（{环境类型字典[天干]}）【{self.八字信息主字典['年干']['左环境']}】"
                    self.收集断语(作用链路过程)
                    print(作用链路过程)


            # 在函数末尾添加“左环境结论”字典
            左环境结论 = {
                '时干': {
                    '作用路径': f"【日干】【{self.八字信息主字典['日干']['名字']}】【{日时关系}】【时干】【{时干名字}】【{时干十神}】",
                    '环境类型': 环境类型字典['时干'],
                    '环境结果': self.八字信息主字典['时干']['左环境']},
                '月干': {
                    '作用路径': f"【年干】【{年干名字}】【{年干十神}】【{年月关系}】【月干】【{月干名字}】【{月干十神}】",
                    '环境类型': 环境类型字典['月干'],
                    '环境结果': self.八字信息主字典['月干']['左环境']},
                '年干': {
                    '作用路径': f"【日干】【{self.八字信息主字典['日干']['名字']}】【{日干月干关系}】【月干】【{月干名字}】【{月干十神}】，【月干】【{月干名字}】【{月干十神}】【{月干年干关系}】【年干】【{年干名字}】【{年干十神}】",
                    '环境类型': 环境类型字典['年干'],
                    '环境结果': self.八字信息主字典['年干']['左环境']}}
            return 左环境结论
        分析天干十神的左环境吉凶()

        #9.4 分析天干十神的右环境吉凶
        def 分析天干十神的右环境吉凶():
            # 分析年干🧨 的右环境吉凶
            年干忌用神归属 = self.八字信息主字典['年干'].get('忌用神归属')
            生扶受制关系 = self.判断两者是否生扶受制('月干', '年干')
            if 年干忌用神归属 == '用神':
                if 生扶受制关系 == '生扶关系':
                    self.八字信息主字典['年干']['右环境'] = '吉'
                elif 生扶受制关系 == '受制关系'or 生扶受制关系 == '不旺不弱关系':
                    self.八字信息主字典['年干']['右环境'] = '凶'
                else:
                    self.八字信息主字典['年干']['右环境'] = '外环境被作用关系不旺不弱关系，既不吉也不凶'
            elif 年干忌用神归属 == '忌神':
                if 生扶受制关系 == '生扶关系':
                    self.八字信息主字典['年干']['右环境'] = '凶'
                elif 生扶受制关系 == '受制关系'or 生扶受制关系 == '不旺不弱关系':
                    self.八字信息主字典['年干']['右环境'] = '吉'
                else: 
                    self.八字信息主字典['年干']['右环境'] = '外环境被作用关系不旺不弱关系，既不吉也不凶'

            # 分析月干🌕 的右环境吉凶
            月干忌用神归属 = self.八字信息主字典['月干'].get('忌用神归属')
            生扶受制关系 = self.判断两者是否生扶受制('日干', '月干')
            if 月干忌用神归属 == '用神':
                if 生扶受制关系 == '生扶关系':
                    self.八字信息主字典['月干']['右环境'] = '吉'
                elif 生扶受制关系 == '受制关系'or 生扶受制关系 == '不旺不弱关系':
                    self.八字信息主字典['月干']['右环境'] = '凶'
                else:  # 不旺不弱关系
                    self.八字信息主字典['月干']['右环境'] = '外环境被作用关系不旺不弱关系，既不吉也不凶'
            elif 月干忌用神归属 == '忌神':
                if 生扶受制关系 == '生扶关系':
                    self.八字信息主字典['月干']['右环境'] = '凶'
                elif 生扶受制关系 == '受制关系'or 生扶受制关系 == '不旺不弱关系':
                    self.八字信息主字典['月干']['右环境'] = '吉'
                else:  # 不旺不弱关系
                    self.八字信息主字典['月干']['右环境'] = '外环境被作用关系不旺不弱关系，既不吉也不凶'

            # 分析时干⏰ 的右环境吉凶
            时干忌用神归属 = self.八字信息主字典['时干'].get('忌用神归属')
            if 时干忌用神归属:
                月干生扶日干 = self.判断两者是否生扶受制('月干', '年干') == '生扶关系'
                日干生扶时干 = self.判断两者是否生扶受制('日干', '月干') == '生扶关系'
                日干制时干 = self.判断两者是否生扶受制('月干', '年干') in ['受制关系', '不旺不弱关系']   #是不是等于'受制关系'or'不旺不弱关系'
                月干制日干 = self.判断两者是否生扶受制('日干', '月干') in ['受制关系', '不旺不弱关系']

                if 时干忌用神归属 == '用神':
                    if 日干生扶时干 and 月干生扶日干:
                        self.八字信息主字典['时干']['右环境'] = '吉'
                    elif (日干生扶时干 and 月干制日干) or (日干制时干 and 月干生扶日干):
                        self.八字信息主字典['时干']['右环境'] = '凶'
                    else:
                        self.八字信息主字典['时干']['右环境'] = '吉'
                elif 时干忌用神归属 == '忌神':
                    if 日干生扶时干 and 月干生扶日干:
                        self.八字信息主字典['时干']['右环境'] = '凶'
                    elif (日干生扶时干 and 月干制日干) or (日干制时干 and 月干生扶日干):
                        self.八字信息主字典['时干']['右环境'] = '吉'
                    else:
                        self.八字信息主字典['时干']['右环境'] = '凶'
            else:
                self.八字信息主字典['时干']['右环境'] = '外环境被作用关系不旺不弱关系，既不吉也不凶'

            # 打印结果
            环境类型字典 = {}
            for 天干 in ['年干', '月干', '时干']:
                十神 = self.八字信息主字典.get(天干).get('十神')
                忌用神归属 = self.八字信息主字典.get(天干).get('忌用神归属')
                右环境 = self.八字信息主字典.get(天干).get('右环境')
                是正十神 = 十神 in ['正官', '正印', '正财', '伤官', '劫财']
                if (self.性别 == '男' and 是正十神) or (self.性别 == '女' and not 是正十神):
                    环境类型字典[天干] = "内心环境"
                else:
                    环境类型字典[天干] = "社会环境"
                作用链路过程 =f"{天干}: {十神} - {忌用神归属} - 右环境：{右环境} - {环境类型字典[天干]}:{右环境}"
                self.收集断语(作用链路过程)
                print(作用链路过程)
                
                # 添加推导过程的打印
                时干名字 = self.八字信息主字典['时干']['名字']
                时干十神 = self.八字信息主字典['时干']['十神']
                月干名字 = self.八字信息主字典['月干']['名字']
                月干十神 = self.八字信息主字典['月干']['十神']
                年干名字 = self.八字信息主字典['年干']['名字']
                年干十神 = self.八字信息主字典['年干']['十神']

                月年关系 = "生" if self.判断两者是否生扶受制('月干', '年干') == '生扶关系' else "制"
                日月关系 = "生" if self.判断两者是否生扶受制('日干', '月干') == '生扶关系' else "制"
                月干日干关系 = "生" if 月干生扶日干 else "制"
                日干时干关系 = "生" if 日干生扶时干 else "制"

                if 天干 == '年干':
                    作用链路过程 =f"🔍「已现十神の右环境」推导过程：【月干】【{月干名字}】【{月干十神}】【{月年关系}】【年干】【{年干名字}】【{年干十神}】，∴【{年干名字}】【{年干十神}】的右环境（{环境类型字典[天干]}）【{self.八字信息主字典['年干']['右环境']}】"
                    self.收集断语(作用链路过程)
                    print(作用链路过程)
                elif 天干 == '月干':
                    作用链路过程 =f"🔍「已现十神の右环境」推导过程：【日干】【{self.八字信息主字典['日干']['名字']}】【{日月关系}】【月干】【{月干名字}】【{月干十神}】，∴【{月干名字}】【{月干十神}】的右环境（{环境类型字典[天干]}）【{self.八字信息主字典['月干']['右环境']}】"
                    self.收集断语(作用链路过程)
                    print(作用链路过程)
                elif 天干 == '时干':
                    作用链路过程 =f"🔍「已现十神の右环境」推导过程：【月干】【{月干名字}】【{月干十神}】【{月干日干关系}】【日干】【{self.八字信息主字典['日干']['名字']}】，【日干】【{self.八字信息主字典['日干']['名字']}】【{日干时干关系}】【时干】【{时干名字}】【{时干十神}】，∴【{时干名字}】【{时干十神}】的右环境（{环境类型字典[天干]}）【{self.八字信息主字典['时干']['右环境']}】"
                    self.收集断语(作用链路过程)
                    print(作用链路过程)
            # 在函数末尾添加结论字典
            右环境结论 = {
                '年干': {
                    '作用路径': f"【月干】【{月干名字}】【{月干十神}】【{月年关系}】【年干】【{年干名字}】【{年干十神}】",
                    '环境类型': 环境类型字典['年干'],
                    '环境结果': self.八字信息主字典['年干']['右环境']},
                '月干': {
                    '作用路径': f"【日干】【{self.八字信息主字典['日干']['名字']}】【{日月关系}】【月干】【{月干名字}】【{月干十神}】",
                    '环境类型': 环境类型字典['月干'],
                    '环境结果': self.八字信息主字典['月干']['右环境']},
                '时干': {
                    '作用路径': f"【月干】【{月干名字}】【{月干十神}】【{月干日干关系}】【日干】【{self.八字信息主字典['日干']['名字']}】，【日干】【{self.八字信息主字典['日干']['名字']}】【{日干时干关系}】【时干】【{时干名字}】【{时干十神}】",
                    '环境类型': 环境类型字典['时干'],
                    '环境结果': self.八字信息主字典['时干']['右环境']}}
            return 右环境结论
        分析天干十神的右环境吉凶()

        #9.5 分析天干十神的内环境的左环境吉凶
        def 分析天干十神的内环境的左环境吉凶():
            # 分析时干⏰月干🌕的内环境左环境吉凶
            for 天干, 地支索引, 左侧地支索引 in [('时干', 3, 2), ('月干', 1, 0)]:     #第一次赋值:天干 = '时干'、地支索引 = 3、左侧地支索引 = 2
                内环境吉凶 = self.八字信息主字典[天干]['内环境']        # 获取该天干的内环境吉凶状态
                同柱地支 = ['年支', '月支', '日支', '时支'][地支索引]         # 获取同柱的地支和左侧的地支
                左侧地支 = ['年支', '月支', '日支', '时支'][左侧地支索引]      # 判断左侧地支对同柱地支的生扶受制关系
                生扶受制关系 = self.判断两者是否生扶受制(左侧地支, 同柱地支)
                if 内环境吉凶 == '吉':                             # 根据内环境吉凶和生扶受制关系，确定左环境的吉凶
                    if 生扶受制关系 == '生扶关系':
                        self.八字信息主字典[天干]['内环境左环境'] = '吉'
                    else:
                        self.八字信息主字典[天干]['内环境左环境'] = '凶'
                elif 内环境吉凶 == '凶':
                    if 生扶受制关系 == '生扶关系':
                        self.八字信息主字典[天干]['内环境左环境'] = '凶'
                    else:
                        self.八字信息主字典[天干]['内环境左环境'] = '吉'
                else:
                    self.八字信息主字典[天干]['内环境左环境'] = '既不吉也不凶，肯定是代码哪里出错了'

            # 分析年干🧨的内环境左环境吉凶（特殊情况） （年干没有左侧地支，需要通过月支和日支间接判断）
            年干内环境吉凶 = self.八字信息主字典['年干']['内环境']
            月支与年地支作用关系 = self.判断两者是否生扶受制('月支', '年支')    # 判断月支对年支的生扶受制关系
            日支与月地支作用关系 = self.判断两者是否生扶受制('日支', '月支')    # 判断日支对月支的生扶受制关系
            # 根据内环境吉凶和生扶受制关系，确定年干左环境的吉凶
            if 年干内环境吉凶 == '吉':
                if 月支与年地支作用关系 in ['受制关系', '不旺不弱关系']:
                    if 日支与月地支作用关系 in ['受制关系', '不旺不弱关系']:
                        self.八字信息主字典['年干']['内环境左环境'] = '吉'
                    elif 日支与月地支作用关系 == '生扶关系':
                        self.八字信息主字典['年干']['内环境左环境'] = '凶'
                elif 月支与年地支作用关系 == '生扶关系':
                    if 日支与月地支作用关系 in ['受制关系', '不旺不弱关系']:
                        self.八字信息主字典['年干']['内环境左环境'] = '凶'
                    elif 日支与月地支作用关系 == '生扶关系':
                        self.八字信息主字典['年干']['内环境左环境'] = '吉'
            elif 年干内环境吉凶 == '凶':
                if 月支与年地支作用关系 in ['受制关系', '不旺不弱关系']:
                    if 日支与月地支作用关系 in ['受制关系', '不旺不弱关系']:
                        self.八字信息主字典['年干']['内环境左环境'] = '凶'
                    elif 日支与月地支作用关系 == '生扶关系':
                        self.八字信息主字典['年干']['内环境左环境'] = '吉'
                elif 月支与年地支作用关系 == '生扶关系':
                    if 日支与月地支作用关系 in ['受制关系', '不旺不弱关系']:
                        self.八字信息主字典['年干']['内环境左环境'] = '吉'
                    elif 日支与月地支作用关系 == '生扶关系':
                        self.八字信息主字典['年干']['内环境左环境'] = '凶'
            else:
                self.八字信息主字典['年干']['内环境左环境'] = '既不吉也不凶，肯定是代码哪里出错了'

            # 打印结果
            环境类型字典 = {}
            for 天干 in ['时干', '月干', '年干']:
                内环境左环境 = self.八字信息主字典.get('年干').get('内环境左环境')
                十神 = self.八字信息主字典.get(天干).get('十神')
                是正十神 = 十神 in ['正官', '正印', '正财', '伤官', '劫财']
                if (self.性别 == '男' and 是正十神) or (self.性别 == '女' and not 是正十神):
                    环境类型字典[天干] = "社会环境的内环境"
                else:
                    环境类型字典[天干] = "内心环境的内环境"
                作用链路过程 = f"{天干}的内环境的左环境:{内环境左环境} - {环境类型字典[天干]}:{内环境左环境}"
                self.收集断语(作用链路过程)
                print(作用链路过程)

                #添加推导过程的打印
                天干名字 = self.八字信息主字典[天干]['名字']
                内环境 = self.八字信息主字典[天干]['内环境']
                
                if 天干 in ['时干', '月干']:
                    左侧地支索引 = 2 if 天干 == '时干' else 0
                    左侧地支 = ['年支', '月支', '日支', '时支'][左侧地支索引]
                    同柱地支 = ['年支', '月支', '日支', '时支'][['年干', '月干', '日干', '时干'].index(天干)]
                    左侧地支名字 = self.本命盘四个地支名字列表[左侧地支索引]
                    同柱地支名字 = self.本命盘四个地支名字列表[['年干', '月干', '日干', '时干'].index(天干)]
                    生扶受制关系 = self.判断两者是否生扶受制(左侧地支, 同柱地支)
                    生制关系 = "生" if 生扶受制关系 == '生扶关系' else "制"
                    
                    作用链路过程 = f"🔍「已现十神の内环境的左环境」推导过程：∵【{左侧地支}】【{左侧地支名字}】【{生制关系}】【{同柱地支}】【{同柱地支名字}】，【{天干}】【{天干名字}】【{十神}】的内环境【{内环境}】，∴【{天干}】【{天干名字}】【{十神}】的内环境左环境（{环境类型字典[天干]}）【{内环境左环境}】"
                    self.收集断语(作用链路过程)
                    print(作用链路过程)

                elif 天干 == '年干':
                    月支名字 = self.本命盘四个地支名字列表[1]
                    日支名字 = self.本命盘四个地支名字列表[2]
                    年支名字 = self.本命盘四个地支名字列表[0]
                    月支与年地支作用关系 = "生" if self.判断两者是否生扶受制('月支', '年支') == '生扶关系' else "制"
                    日支与月地支作用关系 = "生" if self.判断两者是否生扶受制('日支', '月支') == '生扶关系' else "制"
                    
                    作用链路过程 = f"🔍「已现十神の内环境的左环境」推导过程：∵【日支】【{日支名字}】【{日支与月地支作用关系}】【月支】【{月支名字}】，【月支】【{月支名字}】【{月支与年地支作用关系}】【年支】【{年支名字}】，∴【年干】【{天干名字}】【{十神}】的内环境【{内环境}】，∴【年干】【{天干名字}】【{十神}】的内环境左环境（{环境类型字典[天干]}）【{内环境左环境}】"
                    self.收集断语(作用链路过程)
                    print(作用链路过程)

            # 在函数末尾，添加结论字典
            内环境左环境结论 = {
                '时干': {
                    '作用路径': f"∵【{左侧地支}】【{左侧地支名字}】【{生制关系}】【{同柱地支}】【{同柱地支名字}】，∴【时干】【{self.八字信息主字典['时干']['名字']}】【{self.八字信息主字典['时干']['十神']}】的内环境【{self.八字信息主字典['时干']['内环境']}】",
                    '环境类型': 环境类型字典['时干'],
                    '环境结果': self.八字信息主字典['时干']['内环境左环境']},
                '月干': {
                    '作用路径': f"∵【{左侧地支}】【{左侧地支名字}】【{生制关系}】【{同柱地支}】【{同柱地支名字}】，∴【月干】【{self.八字信息主字典['月干']['名字']}】【{self.八字信息主字典['月干']['十神']}】的内环境【{self.八字信息主字典['月干']['内环境']}】",
                    '环境类型': 环境类型字典['月干'],
                    '环境结果': self.八字信息主字典['月干']['内环境左环境']},
                '年干': {
                    '作用路径': f"∵【日支】【{日支名字}】【{日支与月地支作用关系}】【月支】【{月支名字}】，【月支】【{月支名字}】【{月支与年地支作用关系}】【年支】【{年支名字}】，∴【年干】【{self.八字信息主字典['年干']['名字']}】【{self.八字信息主字典['年干']['十神']}】的内环境【{self.八字信息主字典['年干']['内环境']}】",
                    '环境类型': 环境类型字典['年干'],
                    '环境结果': self.八字信息主字典['年干']['内环境左环境']}}
            
            return 内环境左环境结论 
        分析天干十神的内环境的左环境吉凶()

        #9.6 分析天干十神的内环境的右环境吉凶
        def 分析天干十神的内环境右环境吉凶():
            # 分析月干和年干的内环境右环境吉凶
            for 天干, 地支索引, 右侧地支索引 in [('月干', 1, 2), ('年干', 0, 1)]:
                内环境吉凶 = self.八字信息主字典[天干]['内环境']
                同柱地支 = ['年支', '月支', '日支', '时支'][地支索引] 
                右侧地支 = ['年支', '月支', '日支', '时支'][右侧地支索引] 
                生扶受制关系 = self.判断两者是否生扶受制(右侧地支, 同柱地支)
                # 根据内环境吉凶和生扶受制关系，确定右环境的吉凶
                if 内环境吉凶 == '吉':
                    if 生扶受制关系 == '生扶关系':
                        self.八字信息主字典[天干]['内环境右环境'] = '吉'
                    else:
                        self.八字信息主字典[天干]['内环境右环境'] = '凶'
                elif 内环境吉凶 == '凶':
                    if 生扶受制关系 == '生扶关系':
                        self.八字信息主字典[天干]['内环境右环境'] = '凶'
                    else:
                        self.八字信息主字典[天干]['内环境右环境'] = '吉'
                else:
                    self.八字信息主字典[天干]['内环境右环境'] = '既不吉也不凶，肯定是代码哪里出错了'

            # 分析时干的内环境右环境吉凶（特殊情况）
            时干内环境吉凶 = self.八字信息主字典['时干']['内环境']
            日支与时地支作用关系 = self.判断两者是否生扶受制('日支', '时支')    # 判断日支对时支的生扶受制关系
            月支与日地支作用关系 = self.判断两者是否生扶受制('月支', '日支')    # 判断月支对日支的生扶受制关系
            if 时干内环境吉凶 == '吉':                         # 根据内环境吉凶和生扶受制关系，确定时干右环境的吉凶
                if 日支与时地支作用关系 in ['受制关系', '不旺不弱关系']:
                    if 月支与日地支作用关系 in ['受制关系', '不旺不弱关系']:
                        self.八字信息主字典['时干']['内环境右环境'] = '吉'
                    elif 月支与日地支作用关系 == '生扶关系':
                        self.八字信息主字典['时干']['内环境右环境'] = '凶'
                elif 日支与时地支作用关系 == '生扶关系':
                    if 月支与日地支作用关系 in ['受制关系', '不旺不弱关系']:
                        self.八字信息主字典['时干']['内环境右环境'] = '凶'
                    elif 月支与日地支作用关系 == '生扶关系':
                        self.八字信息主字典['时干']['内环境右环境'] = '吉'
            elif 时干内环境吉凶 == '凶':
                if 日支与时地支作用关系 in ['受制关系', '不旺不弱关系']:
                    if 月支与日地支作用关系 in ['受制关系', '不旺不弱关系']:
                        self.八字信息主字典['时干']['内环境右环境'] = '凶'
                    elif 月支与日地支作用关系 == '生扶关系':
                        self.八字信息主字典['时干']['内环境右环境'] = '吉'
                elif 日支与时地支作用关系 == '生扶关系':
                    if 月支与日地支作用关系 in ['受制关系', '不旺不弱关系']:
                        self.八字信息主字典['时干']['内环境右环境'] = '吉'
                    elif 月支与日地支作用关系 == '生扶关系':
                        self.八字信息主字典['时干']['内环境右环境'] = '凶'
            else:
                self.八字信息主字典['时干']['内环境右环境'] = '既不吉也不凶，肯定是代码哪里出错了'
            
            # 打印结果
            环境类型字典 = {}
            临时变量字典 = {'年干': {}, '月干': {}, '时干': {}}
            for 天干 in ['年干', '月干', '时干']:
                内环境右环境 = self.八字信息主字典.get(天干).get('内环境右环境')
                十神 = self.八字信息主字典.get(天干).get('十神')
                是正十神 = 十神 in ['正官', '正印', '正财', '伤官', '劫财']
                if (self.性别 == '男' and 是正十神) or (self.性别 == '女' and not 是正十神):
                    环境类型字典[天干] = "内心环境的内环境"
                else:
                    环境类型字典[天干] = "社会环境的内环境"
                作用链路过程= f"{天干}的内环境的右环境：{内环境右环境} - {环境类型字典[天干]}:{内环境右环境}"
                self.收集断语(作用链路过程)
                print(作用链路过程)

                # 添加推导过程的打印
                天干名字 = self.八字信息主字典[天干]['名字']
                内环境 = self.八字信息主字典[天干]['内环境']

                if 天干 in ['年干', '月干']:
                    右侧地支索引 = ['年干', '月干', '日干', '时干'].index(天干) + 1
                    右侧地支 = ['年支', '月支', '日支', '时支'][右侧地支索引]
                    同柱地支 = ['年支', '月支', '日支', '时支'][['年干', '月干', '日干', '时干'].index(天干)]
                    右侧地支名字 = self.本命盘四个地支名字列表[右侧地支索引]
                    同柱地支名字 = self.本命盘四个地支名字列表[['年干', '月干', '日干', '时干'].index(天干)]
                    生扶受制关系 = self.判断两者是否生扶受制(右侧地支, 同柱地支)
                    生制关系 = "生" if 生扶受制关系 == '生扶关系' else "制"
                    临时变量字典[天干].update({'右侧地支': 右侧地支,'右侧地支名字': 右侧地支名字,'生制关系': 生制关系,'同柱地支': 同柱地支,'同柱地支名字': 同柱地支名字,'天干名字': 天干名字,'十神': 十神,'内环境': 内环境})
                    作用链路过程= f"🔍「已现十神の内环境的右环境」推导过程：∵【{右侧地支}】【{右侧地支名字}】【{生制关系}】【{同柱地支}】【{同柱地支名字}】，【{天干}】【{天干名字}】【{十神}】的内环境【{内环境}】，∴【{天干}】【{天干名字}】【{十神}】的内环境右环境（{环境类型字典[天干]}）【{内环境右环境}】"
                    self.收集断语(作用链路过程)
                    print(作用链路过程)

                elif 天干 == '时干':
                    日支名字 = self.本命盘四个地支名字列表[2]
                    月支名字 = self.本命盘四个地支名字列表[1]
                    时支名字 = self.本命盘四个地支名字列表[3]
                    日支与时地支作用关系 = "生" if self.判断两者是否生扶受制('日支', '时支') == '生扶关系' else "制"
                    月支与日地支作用关系 = "生" if self.判断两者是否生扶受制('月支', '日支') == '生扶关系' else "制"
                    作用链路过程= f"🔍「已现十神の内环境的右环境」推导过程：∵【月支】【{月支名字}】【{月支与日地支作用关系}】【日支】【{日支名字}】，【日支】【{日支名字}】【{日支与时地支作用关系}】【时支】【{时支名字}】，【时干】【{天干名字}】【{十神}】的内环境【{内环境}】，∴【时干】【{天干名字}】【{十神}】的内环境右环境（{环境类型字典[天干]}）【{内环境右环境}】"
                    self.收集断语(作用链路过程)
                    print(作用链路过程)
            
            内环境右环境结论 = {
            '年干': {
                '作用路径': f"∵【{临时变量字典['年干']['右侧地支']}】【{临时变量字典['年干']['右侧地支名字']}】【{临时变量字典['年干']['生制关系']}】【{临时变量字典['年干']['同柱地支']}】【{临时变量字典['年干']['同柱地支名字']}】，【年干】【{临时变量字典['年干']['天干名字']}】【{临时变量字典['年干']['十神']}】的内环境【{临时变量字典['年干']['内环境']}】",
                '环境类型': 环境类型字典['年干'],
                '环境结果': self.八字信息主字典['年干']['内环境右环境']},
            '月干': {
                '作用路径': f"∵【{临时变量字典['月干']['右侧地支']}】【{临时变量字典['月干']['右侧地支名字']}】【{临时变量字典['月干']['生制关系']}】【{临时变量字典['月干']['同柱地支']}】【{临时变量字典['月干']['同柱地支名字']}】，【月干】【{临时变量字典['月干']['天干名字']}】【{临时变量字典['月干']['十神']}】的内环境【{临时变量字典['月干']['内环境']}】",
                '环境类型': 环境类型字典['月干'],
                '环境结果': self.八字信息主字典['月干']['内环境右环境']},
            '时干': {
                '作用路径': f"∵【月支】【{月支名字}】【{月支与日地支作用关系}】【日支】【{日支名字}】，【日支】【{日支名字}】【{日支与时地支作用关系}】【时支】【{时支名字}】，【时干】【{天干名字}】【{十神}】的内环境【{内环境}】",
                '环境类型': 环境类型字典['时干'],
                '环境结果': self.八字信息主字典['时干']['内环境右环境']}}
            return 内环境右环境结论
        分析天干十神的内环境右环境吉凶()

        #特别版：分析天干十神的国外环境吉凶
        def 分析天干十神的国外环境吉凶():
            def 反转作用结果(作用结果):
                if 作用结果 == '生扶关系':
                    return '受制关系'
                elif 作用结果 == '受制关系':
                    return '生扶关系'
                return 作用结果
            
            天干顺序 = ['年干', '月干', '日干', '时干']
            for 天干 in ['年干', '月干', '时干']:
                # 根据self.性别确定方向
                if self.性别 == '男':
                    环境方向 = -1  # 男命左侧为社会环境
                    国外环境方向 = -2  # 男命左侧的左侧为国外环境
                else:
                    环境方向 = 1   # 女命右侧为社会环境
                    国外环境方向 = 2   # 女命右侧的右侧为国外环境

                当前索引 = 天干顺序.index(天干)
                国外环境索引 = 当前索引 + 国外环境方向

                # 处理特殊情况
                if 国外环境索引 < 0 or 国外环境索引 >= len(天干顺序):

                    # 男命特殊情况处理
                    if self.性别 == '男':
                        if 天干 == '年干':
                            # 男命年干的国外环境：日干作用月干，再作用于年干
                            月干旺弱 = self.八字信息主字典['月干']['旺弱状态']
                            日干作用月干结果 = self.判断两者是否生扶受制('日干', '月干')
                            if 月干旺弱 == '弱':
                                日干作用月干结果 = 反转作用结果(日干作用月干结果)
                            月干作用年干结果 = self.判断两者是否生扶受制('月干', '年干')
                            if 日干作用月干结果 == '生扶':
                                self.八字信息主字典[天干]['国外环境'] = '吉'
                            else:
                                self.八字信息主字典[天干]['国外环境'] = '凶'
                            continue
                        elif 天干 == '月干':
                            # 男命月干的国外环境：日干作用月干，再作用于年干
                            # 与年干的国外环境相同
                            月干旺弱 = self.八字信息主字典['月干']['旺弱状态']
                            日干作用月干结果 = self.判断两者是否生扶受制('日干', '月干')
                            if 月干旺弱 == '弱':
                                日干作用月干结果 = 反转作用结果(日干作用月干结果)
                            月干作用年干结果 = self.判断两者是否生扶受制('月干', '年干')
                            if 日干作用月干结果 == '生扶':
                                self.八字信息主字典[天干]['国外环境'] = '吉'
                            else:
                                self.八字信息主字典[天干]['国外环境'] = '凶'
                            continue

                    # 女命特殊情况处理
                    else:
                        if 天干 == '时干':
                            # 女命时干的国外环境：月干作用日干，再作用于时干
                            日干旺弱 = self.八字信息主字典['日干']['旺弱状态']
                            月干作用日干结果 = self.判断两者是否生扶受制('月干', '日干')
                            if 日干旺弱 == '弱':
                                月干作用日干结果 = 反转作用结果(月干作用日干结果)
                            日干作用时干结果 = self.判断两者是否生扶受制('日干', '时干')
                            if 月干作用日干结果 == '生扶':
                                self.八字信息主字典[天干]['国外环境'] = '吉'
                            else:
                                self.八字信息主字典[天干]['国外环境'] = '凶'
                            continue
                        elif 天干 == '日干':
                            # 女命日干的国外环境：月干作用日干，再作用于时干
                            # 与时干的国外环境相同
                            日干旺弱 = self.八字信息主字典['日干']['旺弱状态']
                            月干作用日干结果 = self.判断两者是否生扶受制('月干', '日干')
                            if 日干旺弱 == '弱':
                                月干作用日干结果 = 反转作用结果(月干作用日干结果)
                            日干作用时干结果 = self.判断两者是否生扶受制('日干', '时干')
                            if 月干作用日干结果 == '生扶':
                                self.八字信息主字典[天干]['国外环境'] = '吉'
                            else:
                                self.八字信息主字典[天干]['国外环境'] = '凶'
                else:
                    # 正常情况处理
                    国外环境天干 = 天干顺序[国外环境索引]
                    作用方 = 国外环境天干
                    被作用方 = 天干
                    被作用方旺弱 = self.八字信息主字典[被作用方]['旺弱状态']
                    作用结果 = self.判断两者是否生扶受制(作用方, 被作用方)
                    if 被作用方旺弱 == '弱':
                        作用结果 = 反转作用结果(作用结果)
                    if 作用结果 == '生扶':
                        self.八字信息主字典[天干]['国外环境'] = '吉'
                    else:
                        self.八字信息主字典[天干]['国外环境'] = '凶'
        分析天干十神的国外环境吉凶()



        #9.7 分析未现天干十神的的外环境吉凶
        def 分析未现天干十神的外环境吉凶():
            for 天干名, 属性子字典 in self.未现正偏十神主字典.items():
                名字 = 属性子字典.get('名字', '')
                十神 = 属性子字典.get('十神', '')
                忌用神归属 = 属性子字典.get('忌用神归属', '')
                窗口名字 = 属性子字典.get('窗口名字', '')
                是否有镜像 = 属性子字典.get('是否有镜像', '')
                
                if not 窗口名字:    #缺少窗口十神时的处理逻辑
                    print(f"未现十神：{天干名}，缺少窗口十神信息，无法判断外环境")
                    属性子字典['外环境'] = '未知'
                    continue  # 跳过本次循环，处理下一个未现十神

                生扶受制关系 = self.判断两者是否生扶受制(窗口名字, 名字)
                
                # 根据忌用神归属和生扶受制关系，初步确定外环境结论
                if 忌用神归属 == '忌神':
                    if 生扶受制关系 == '受制关系':
                        外环境结论 = '吉'
                    elif 生扶受制关系 == '生扶关系':
                        外环境结论 = '凶'
                    else:
                        外环境结论 = '未知'
                elif 忌用神归属 == '用神':
                    if 生扶受制关系 == '受制关系':
                        外环境结论 = '凶'
                    elif 生扶受制关系 == '生扶关系':
                        外环境结论 = '吉'
                    else:
                        外环境结论 = '未知'
                else:
                    外环境结论 = '未知'
                
                # 检查是否有镜像，如果有，则反转外环境结论
                if 是否有镜像 == '有镜像':
                    if 外环境结论 == '吉':
                        外环境结论 = '凶'
                    elif 外环境结论 == '凶':
                        外环境结论 = '吉'
                
                # 将最终的外环境结论存入属性子字典
                属性子字典['外环境'] = 外环境结论
                self.未现正偏十神主字典[天干名]['外环境'] = 外环境结论

                作用链路过程 =f"未现十神：{十神} - {名字} - 外环境结论：{外环境结论}"
                self.收集断语(作用链路过程)
                print(作用链路过程)
                #新增打印推导过程
                窗口位置 = next(位置 for 位置, 信息 in self.八字信息主字典.items() if 信息['名字'] == 属性子字典['窗口名字'])
                生制关系 = "生" if 生扶受制关系 == '生扶关系' else "制"
                作用链路过程 =f"🔍「未现十神の外环境」推导过程：∵【{窗口位置}】【{self.八字信息主字典[窗口位置]['名字']}】【{self.八字信息主字典[窗口位置]['十神']}】【{生制关系}】未现十神的【{名字}】【{十神}】，∴未现天干十神【{名字}】【{十神}】的外环境【{外环境结论}】"
                self.收集断语(作用链路过程)
                print(作用链路过程)

            外环境结论 = {}
            for 天干名, 属性子字典 in self.未现正偏十神主字典.items():
                窗口位置 = next((位置 for 位置, 信息 in self.八字信息主字典.items() if 信息.get('名字') == 属性子字典['窗口名字']), None)
                if 窗口位置:
                    外环境结论[天干名] = {
                        '外环境': 属性子字典['外环境'],  # 使用self.未现正偏十神主字典中的外环境
                        '作用路径': f"🔍「未现十神の外环境」推导过程：∵【{窗口位置}】的【{self.八字信息主字典[窗口位置]['名字']}】【{self.八字信息主字典[窗口位置]['十神']}】【{生制关系}】未现十神的【{属性子字典['名字']}】【{属性子字典['十神']}】，∴未现天干十神【{属性子字典['名字']}】【{属性子字典['十神']}】的外环境【{属性子字典['外环境']}】"
                    }
            return 外环境结论
        分析未现天干十神的外环境吉凶()

        #9.8 分析未现天干十神的的内环境吉凶
        def 分析未现天干十神的内环境吉凶():
            for 天干名, 属性子字典 in self.未现正偏十神主字典.items():
                名字 = 属性子字典.get('名字', '')
                十神 = 属性子字典.get('十神', '')
                外环境 = 属性子字典.get('外环境', '')
                窗口名字 = 属性子字典.get('窗口名字', '')
                是否有镜像 = 属性子字典.get('是否有镜像', '')

                if not 窗口名字:     # 如果缺少窗口十神的信息，无法判断内环境
                    属性子字典['内环境'] = '未知'
                    continue

                # 获取窗口十神的“是否有根”信息。  窗口十神是已现十神，可以从self.八字信息主字典中获取
                窗口是否有根 = ''
                for 键, 值 in self.八字信息主字典.items():
                    if 值.get('名字') == 窗口名字:
                        窗口是否有根 = 值.get('是否有根', '')
                        break
                else:     # 如果在self.八字信息主字典中找不到窗口十神的信息，无法判断内环境
                    属性子字典['内环境'] = '果在self.八字信息主字典中找不到其窗口十神的信息'
                    continue

                # 根据外环境和窗口十神的有根情况，确定内环境结论
                if 外环境 == '吉':
                    if 窗口是否有根 == '有根':
                        内环境结论 = '吉'
                    else:
                        内环境结论 = '凶'
                elif 外环境 == '凶':
                    if 窗口是否有根 == '有根':
                        内环境结论 = '凶'
                    else:
                        内环境结论 = '吉'
                else:
                    内环境结论 = '未知'

                # 检查是否有镜像，如果有，则反转内环境结论
                if 是否有镜像 == '有镜像':
                    if 内环境结论 == '吉':
                        内环境结论 = '凶'
                    elif 内环境结论 == '凶':
                        内环境结论 = '吉'

                # 将最终的内环境结论存入属性子字典
                属性子字典['内环境'] = 内环境结论
                self.未现正偏十神主字典[天干名]['内环境'] = 内环境结论

                作用链路过程 = f"未现十神：{十神} - {名字} - 内环境结论：{内环境结论}"
                self.收集断语(作用链路过程)
                print(作用链路过程)
                
                #推导过程print代码
                窗口位置 = next((位置 for 位置, 信息 in self.八字信息主字典.items() if 信息.get('名字') == 窗口名字), "未知位置")
                窗口十神 = next((信息.get('十神', '') for 信息 in self.八字信息主字典.values() if 信息.get('名字') == 窗口名字), "")
                窗口是否有根 = next((信息.get('是否有根', '无根') for 信息 in self.八字信息主字典.values() if 信息.get('名字') == 窗口名字), "无根")
                
                作用链路过程 = f"🔍「未现十神の内环境」推导过程：因为【{窗口位置}】【{窗口十神}】【{窗口名字}】【{窗口是否有根}】，∴未现天干十神【{名字}】【{十神}】的内环境【{内环境结论}】。"
                self.收集断语(作用链路过程)
                print(作用链路过程)
            内环境结论 = {}
            for 天干名, 属性子字典 in self.未现正偏十神主字典.items():
                窗口名字 = 属性子字典.get('窗口名字')
                窗口位置 = next((位置 for 位置, 信息 in self.八字信息主字典.items() if 信息.get('名字') == 属性子字典['窗口名字']), None)
                if 窗口位置:
                    窗口十神 = next((信息.get('十神', '') for 信息 in self.八字信息主字典.values() if 信息.get('名字') == 窗口名字), "")
                    窗口是否有根 = next((信息.get('是否有根', '无根') for 信息 in self.八字信息主字典.values() if 信息.get('名字') == 窗口名字), "无根")
                    内环境结论[天干名] = {
                    '内环境': 属性子字典['内环境'],
                    '作用路径': f"🔍「未现十神の内环境」推导过程：∵【{窗口位置}】【{窗口十神}】【{窗口名字}】【{窗口是否有根}】，∴未现天干十神【{属性子字典['名字']}】【{属性子字典['十神']}】的内环境【{属性子字典['内环境']}】。"
                }
            return 内环境结论
        分析未现天干十神的内环境吉凶()

        #9.9 分析未现天干十神的左环境吉凶
        def 分析未现天干十神的左环境吉凶():
            天干顺序 = ['年干', '月干', '日干', '时干']
            
            for 天干名, 属性子字典 in self.未现正偏十神主字典.items():
                十神 = 属性子字典.get('十神', '')
                外环境 = 属性子字典.get('外环境', '')
                窗口名字 = 属性子字典.get('窗口名字', '')
                是否有镜像 = 属性子字典.get('是否有镜像', '')

                if not 窗口名字:
                    属性子字典['左环境'] = '未知'
                    continue  # 缺少窗口名字信息，无法判断

                # 找出窗口名字对应的干支位置
                窗口位置 = None
                for 位置, 干名 in zip(天干顺序, self.本命盘四个天干名字列表):
                    if 干名 == 窗口名字:
                        窗口位置 = 位置
                        break

                if 窗口位置:
                    窗口索引 = 天干顺序.index(窗口位置)
                    if 窗口索引 > 0:
                        左侧位置 = 天干顺序[窗口索引 - 1]
                        左侧名字 = self.本命盘四个天干名字列表[窗口索引 - 1]
                    else:
                        左侧名字 = None  # 窗口名字已是最左边，无左侧

                    if 左侧名字:
                        生扶受制关系 = self.判断两者是否生扶受制(左侧名字, 窗口名字)
                        
                        if 外环境 == '吉':
                            if 生扶受制关系 == '生扶关系':
                                左环境结论 = '吉'
                            elif 生扶受制关系 in ['受制关系', '不旺不弱关系']:
                                左环境结论 = '凶'
                            else:
                                左环境结论 = '未知'
                        elif 外环境 == '凶':
                            if 生扶受制关系 == '生扶关系':
                                左环境结论 = '凶'
                            elif 生扶受制关系 in ['受制关系', '不旺不弱关系']:
                                左环境结论 = '吉'
                            else:
                                左环境结论 = '未知'
                        else:
                            左环境结论 = '未知'
                    else:
                        左环境结论 = '未知'  # 无左侧名字，无法判断
                else:
                    左环境结论 = '未知'  # 窗口名字不在天干顺序中，可能是特殊情况

                # 特殊情况：窗口十神在年干
                if 窗口位置 == '年干':
                    日干生扶月干 = self.判断两者是否生扶受制(self.本命盘四个天干名字列表[2], self.本命盘四个天干名字列表[1]) == '生扶关系'
                    月干生扶年干 = self.判断两者是否生扶受制(self.本命盘四个天干名字列表[1], self.本命盘四个天干名字列表[0]) == '生扶关系'
                    日干受制月干 = self.判断两者是否生扶受制(self.本命盘四个天干名字列表[2], self.本命盘四个天干名字列表[1]) in ['受制关系', '不旺不弱关系']
                    月干受制年干 = self.判断两者是否生扶受制(self.本命盘四个天干名字列表[1], self.本命盘四个天干名字列表[0]) in ['受制关系', '不旺不弱关系']

                    生扶受制关系 = self.判断两者是否生扶受制(窗口名字, 天干名)

                    if 外环境 == '吉':
                        if 月干生扶年干 and 日干生扶月干:
                            左环境结论 = '吉'
                        elif 月干生扶年干 and 日干受制月干:
                            左环境结论 = '凶'
                        elif 月干受制年干 and 日干生扶月干:
                            左环境结论 = '凶'
                        elif 月干受制年干 and 日干受制月干:
                            左环境结论 = '吉'
                        else:
                            左环境结论 = '未知'
                    elif 外环境 == '凶':
                        if 月干生扶年干 and 日干生扶月干:
                            左环境结论 = '凶'
                        elif 月干生扶年干 and 日干受制月干:
                            左环境结论 = '吉'
                        elif 月干受制年干 and 日干生扶月干:
                            左环境结论 = '吉'
                        elif 月干受制年干 and 日干受制月干:
                            左环境结论 = '凶'
                        else:
                            左环境结论 = '未知'

                # 检查是否有镜像，需要反转结论
                if 是否有镜像 == '有镜像':
                    if 左环境结论 == '吉':
                        左环境结论 = '凶'
                    elif 左环境结论 == '凶':
                        左环境结论 = '吉'

                # 判断左环境代表的含义
                是正十神 = 十神 in ['正官', '正印', '正财', '伤官', '劫财']
                if (self.性别 == '男' and 是正十神) or (self.性别 == '女' and not 是正十神):
                    环境类型 = "社会环境"
                else:
                    环境类型 = "内心环境"

                # 将左环境结论记录到属性子字典
                属性子字典['左环境'] = 左环境结论
                属性子字典['环境类型'] = 环境类型

                作用链路过程 = f"未现十神：{十神} - {天干名} - 左环境：{左环境结论} - {环境类型}:{左环境结论}"
                self.收集断语(作用链路过程)
                print(作用链路过程)

                # 添加推导过程的打印
                左侧位置 = 天干顺序[窗口索引 - 1] if 窗口索引 > 0 else "无"
                左侧名字 = self.本命盘四个天干名字列表[窗口索引 - 1] if 窗口索引 > 0 else "无"
                左侧十神 = next((信息.get('十神', '') for 位置, 信息 in self.八字信息主字典.items() if 信息.get('名字') == 左侧名字), "")
                窗口十神 = next((信息.get('十神', '') for 位置, 信息 in self.八字信息主字典.items() if 信息.get('名字') == 窗口名字), "")

                if 窗口位置 == '年干':
                    日干月干关系 = "生" if 日干生扶月干 else "制"
                    月干年干关系 = "生" if 月干生扶年干 else "制"
                    作用链路过程 = f"「未现十神の左环境」推导过程：∵【日干】【{self.本命盘四个天干名字列表[2]}】【{self.八字信息主字典['日干']['十神']}】【{日干月干关系}】【月干】【{self.本命盘四个天干名字列表[1]}】【{self.八字信息主字典['月干']['十神']}】，【月干】【{self.本命盘四个天干名字列表[1]}】【{self.八字信息主字典['月干']['十神']}】【{月干年干关系}】【年干】【{窗口名字}】【{窗口十神}】【{生扶受制关系}】未现天干十神【{天干名}】【{十神}】∴未现十神【{天干名}】【{十神}】的左环境（{环境类型}）【{左环境结论}】"
                    self.收集断语(作用链路过程)
                    print(作用链路过程)
                else:
                    生制关系 = "生" if 生扶受制关系 == '生扶关系' else "制"
                    作用链路过程 = f"「未现十神の左环境」推导过程：∵【{左侧位置}】【{左侧名字}】【{左侧十神}】【{生制关系}】【{窗口位置}】【{窗口十神}】【{窗口名字}】，【{窗口位置}】【{窗口十神}】【{窗口名字}】【{生制关系}】未现天干十神【{天干名}】【{十神}】∴未现十神【{天干名}】【{十神}】的左环境（{环境类型}）【{左环境结论}】"
                    self.收集断语(作用链路过程)
                    print(作用链路过程)
            
            左环境结论 = {}
            for 天干名, 属性子字典 in self.未现正偏十神主字典.items():
                窗口名字 = 属性子字典.get('窗口名字')
                十神 = 属性子字典.get('十神')
                窗口位置 = next((位置 for 位置, 信息 in self.八字信息主字典.items() if 信息.get('名字') == 窗口名字), None)
                
                if 窗口位置 == '年干':
                    # 特殊情况：窗口十神在年干
                    日干月干关系 = "生" if 日干生扶月干 else "制"
                    月干年干关系 = "生" if 月干生扶年干 else "制"
                    左环境结论[天干名] = {
                        '左环境': 属性子字典['左环境'],
                        '作用路径': f"「未现十神の左环境」推导过程：∵【日干】【{self.本命盘四个天干名字列表[2]}】【{self.八字信息主字典['日干']['十神']}】【{日干月干关系}】【月干】【{self.本命盘四个天干名字列表[1]}】【{self.八字信息主字典['月干']['十神']}】，【月干】【{self.本命盘四个天干名字列表[1]}】【{self.八字信息主字典['月干']['十神']}】【{月干年干关系}】【年干】【{窗口名字}】【{窗口十神}】，∴未现十神【{天干名}】【{十神}】的左环境为【{属性子字典['左环境']}】"
                    }
                else:
                    # 普通情况
                    左侧位置 = 天干顺序[天干顺序.index(窗口位置) - 1] if 天干顺序.index(窗口位置) > 0 else None
                    if 左侧位置:
                        左侧名字 = self.八字信息主字典[左侧位置]['名字']
                        左侧十神 = self.八字信息主字典[左侧位置]['十神']
                        生制关系 = "生" if 生扶受制关系 == '生扶关系' else "制"
                        左环境结论[天干名] = {
                            '左环境': 属性子字典['左环境'],
                            '作用路径': f"「未现十神の左环境」推导过程：∵【{左侧位置}】【{左侧名字}】【{左侧十神}】【{生制关系}】【{窗口位置}】【{窗口十神}】【{窗口名字}】，∴未现十神【{天干名}】【{十神}】的左环境为【{属性子字典['左环境']}】"
                        }
            return 左环境结论
        分析未现天干十神的左环境吉凶()

        # 9.10 分析未现天干十神的右环境吉凶
        def 分析未现天干十神的右环境吉凶():
            天干顺序 = ['年干', '月干', '日干', '时干']
            右环境结论字典 = {}
            for 天干名, 属性子字典 in self.未现正偏十神主字典.items():
                十神 = 属性子字典.get('十神', '')
                外环境 = 属性子字典.get('外环境', '')
                窗口名字 = 属性子字典.get('窗口名字', '')
                是否有镜像 = 属性子字典.get('是否有镜像', '')

                if not 窗口名字:
                    属性子字典['右环境'] = '未知'
                    continue  # 缺少窗口名字信息，无法判断

                # 找出窗口名字对应的干支位置
                窗口位置 = None
                for 位置, 干名 in zip(天干顺序, self.本命盘四个天干名字列表):
                    if 干名 == 窗口名字:
                        窗口位置 = 位置
                        break

                if 窗口位置:
                    窗口索引 = 天干顺序.index(窗口位置)
                    if 窗口索引 < len(天干顺序) - 1:
                        右侧位置 = 天干顺序[窗口索引 + 1]
                        右侧名字 = self.本命盘四个天干名字列表[窗口索引 + 1]
                    else:
                        右侧名字 = None  # 窗口名字已是最右边，无右侧

                    if 右侧名字:
                        生扶受制关系 = self.判断两者是否生扶受制(右侧名字, 窗口名字)
                        
                        if 外环境 == '吉':
                            if 生扶受制关系 == '生扶关系':
                                右环境结论 = '吉'
                            elif 生扶受制关系 in ['受制关系', '不旺不弱关系']:
                                右环境结论 = '凶'
                            else:
                                右环境结论 = '未知'
                        elif 外环境 == '凶':
                            if 生扶受制关系 == '生扶关系':
                                右环境结论 = '凶'
                            elif 生扶受制关系 in ['受制关系', '不旺不弱关系']:
                                右环境结论 = '吉'
                            else:
                                右环境结论 = '未知'
                        else:
                            右环境结论 = '未知'
                    else:
                        右环境结论 = '未知'  # 无右侧名字，无法判断
                else:
                    右环境结论 = '未知'  # 窗口名字不在天干顺序中，可能是特殊情况

                # 特殊情况：窗口十神在时干
                if 窗口位置 == '时干':
                    月干生扶日干 = self.判断两者是否生扶受制(self.本命盘四个天干名字列表[1], self.本命盘四个天干名字列表[2]) == '生扶关系'
                    日干生扶时干 = self.判断两者是否生扶受制(self.本命盘四个天干名字列表[2], self.本命盘四个天干名字列表[3]) == '生扶关系'
                    月干受制日干 = self.判断两者是否生扶受制(self.本命盘四个天干名字列表[1], self.本命盘四个天干名字列表[2]) in ['受制关系', '不旺不弱关系']
                    日干受制时干 = self.判断两者是否生扶受制(self.本命盘四个天干名字列表[2], self.本命盘四个天干名字列表[3]) in ['受制关系', '不旺不弱关系']

                    if 外环境 == '吉':
                        if 日干生扶时干 and 月干生扶日干:
                            右环境结论 = '吉'
                        elif 日干生扶时干 and 月干受制日干:
                            右环境结论 = '凶'
                        elif 日干受制时干 and 月干生扶日干:
                            右环境结论 = '凶'
                        elif 日干受制时干 and 月干受制日干:
                            右环境结论 = '吉'
                        else:
                            右环境结论 = '未知'
                    elif 外环境 == '凶':
                        if 日干生扶时干 and 月干生扶日干:
                            右环境结论 = '凶'
                        elif 日干生扶时干 and 月干受制日干:
                            右环境结论 = '吉'
                        elif 日干受制时干 and 月干生扶日干:
                            右环境结论 = '吉'
                        elif 日干受制时干 and 月干受制日干:
                            右环境结论 = '凶'
                        else:
                            右环境结论 = '未知'

                # 检查是否有镜像，需要反转结论
                if 是否有镜像 == '有镜像':
                    if 右环境结论 == '吉':
                        右环境结论 = '凶'
                    elif 右环境结论 == '凶':
                        右环境结论 = '吉'

                # 判断右环境代表的含义
                是正十神 = 十神 in ['正官', '正印', '正财', '伤官', '劫财']
                if (self.性别 == '男' and 是正十神) or (self.性别 == '女' and not 是正十神):
                    环境类型 = "内心环境"
                else:
                    环境类型 = "社会环境"

                # 将右环境结论记录到属性子字典
                属性子字典['右环境'] = 右环境结论
                属性子字典['环境类型'] = 环境类型

                作用链路过程 = f"未现十神：{十神} - {天干名} - 右环境：{右环境结论} - {环境类型}:{右环境结论}"
                self.收集断语(作用链路过程)
                print(作用链路过程)

                # 添加推导过程的打印
                窗口位置 = next((位置 for 位置, 信息 in self.八字信息主字典.items() if 信息.get('名字') == 窗口名字), "未知位置")
                窗口十神 = next((信息.get('十神', '') for 信息 in self.八字信息主字典.values() if 信息.get('名字') == 窗口名字), "")
                
                if 窗口位置 != '时干':
                    右侧位置 = 天干顺序[天干顺序.index(窗口位置) + 1] if 天干顺序.index(窗口位置) < 3 else "无"
                    右侧名字 = self.本命盘四个天干名字列表[天干顺序.index(窗口位置) + 1] if 天干顺序.index(窗口位置) < 3 else "无"
                    右侧十神 = next((信息.get('十神', '') for 信息 in self.八字信息主字典.values() if 信息.get('名字') == 右侧名字), "")
                    生制关系 = "生" if 生扶受制关系 == '生扶关系' else "制"
                    作用链路过程 = f"🔍「未现十神の右环境」推导过程：∵【{右侧位置}】【{右侧名字}】【{右侧十神}】【{生制关系}】【{窗口位置}】【{窗口名字}】【{窗口十神}】，∴未现天干十神【{天干名}】【{十神}】的右环境（{环境类型}）【{右环境结论}】"
                    self.收集断语(作用链路过程)
                    print(作用链路过程)
                else:
                    月干名字 = self.本命盘四个天干名字列表[1]
                    月干十神 = self.八字信息主字典['月干']['十神']
                    日干名字 = self.本命盘四个天干名字列表[2]
                    日干十神 = self.八字信息主字典['日干']['十神']
                    
                    月日关系 = "生" if 月干生扶日干 else "制"
                    日时关系 = "生" if 日干生扶时干 else "制"
                    作用链路过程 = f"🔍「未现十神の右环境」推导过程：∵【月干】【{月干名字}】【{月干十神}】【{月日关系}】【日干】【{日干名字}】【{日干十神}】，【日干】【{日干名字}】【{日干十神}】【{日时关系}】【时干】【{窗口名字}】【{窗口十神}】，∴未现天干十神【{天干名}】【{十神}】的右环境（{环境类型}）【{右环境结论}】"
                    self.收集断语(作用链路过程)
                    print(作用链路过程)

                if 窗口位置 == '时干':
                    右环境结论字典[天干名] = {'右环境': 右环境结论,
                        '作用路径': f"🔍「未现十神の右环境」推导过程：∵【月干】【{月干名字}】【{月干十神}】【{月日关系}】【日干】【{日干名字}】【{日干十神}】，【日干】【{日干名字}】【{日干十神}】【{日时关系}】【时干】【{窗口名字}】【{窗口十神}】，∴未现天干十神【{天干名}】【{十神}】的右环境（{环境类型}）【{右环境结论}】"
                    }
                else:
                    右环境结论字典[天干名] = {'右环境': 右环境结论,
                        '作用路径': f"🔍「未现十神の右环境」推导过程：∵【{右侧位置}】【{右侧名字}】【{右侧十神}】【{生制关系}】【{窗口位置}】【{窗口名字}】【{窗口十神}】，∴未现天干十神【{天干名}】【{十神}】的右环境（{环境类型}）【{右环境结论}】"
                    }

            return 右环境结论字典
        分析未现天干十神的右环境吉凶()

        # 9.11 分析未现天干十神的内环境的左环境
        def 分析未现天干十神的内环境的左环境():
            天干顺序 = ['年干', '月干', '日干', '时干']
            地支顺序 = ['年支', '月支', '日支', '时支']

            for 天干名, 属性子字典 in self.未现正偏十神主字典.items():
                十神 = 属性子字典.get('十神', '')
                内环境 = 属性子字典.get('内环境', '')
                窗口名字 = 属性子字典.get('窗口名字', '')
                是否有镜像 = 属性子字典.get('是否有镜像', '')

                if not 窗口名字 or not 内环境:
                    属性子字典['内环境左环境'] = '未知'
                    continue

                # 找出窗口名字对应的干支位置
                窗口位置 = None
                for 位置, 干名 in zip(天干顺序, self.本命盘四个天干名字列表):
                    if 干名 == 窗口名字:
                        窗口位置 = 位置
                        break

                if 窗口位置:
                    窗口索引 = 天干顺序.index(窗口位置)
                    同柱地支 = 地支顺序[窗口索引]

                    if 窗口位置 != '年干':
                        左侧地支 = 地支顺序[窗口索引 - 1]
                        生扶受制关系 = self.判断两者是否生扶受制(左侧地支, 同柱地支)

                        if 内环境 == '吉':
                            if 生扶受制关系 == '生扶关系':
                                内环境左环境结论 = '吉'
                            elif 生扶受制关系 in ['受制关系', '不旺不弱关系']:
                                内环境左环境结论 = '凶'
                        elif 内环境 == '凶':
                            if 生扶受制关系 == '生扶关系':
                                内环境左环境结论 = '凶'
                            elif 生扶受制关系 in ['受制关系', '不旺不弱关系']:
                                内环境左环境结论 = '吉'
                    else:
                        # 特殊情况：窗口十神在年干
                        日支与月地支作用关系 = self.判断两者是否生扶受制('日支', '月支')
                        月支与年地支作用关系 = self.判断两者是否生扶受制('月支', '年支')

                        if 内环境 == '吉':
                            if 日支与月地支作用关系 == '生扶关系' and 月支与年地支作用关系 == '生扶关系':
                                内环境左环境结论 = '吉'
                            elif 日支与月地支作用关系 == '生扶关系' and 月支与年地支作用关系 in ['受制关系', '不旺不弱关系']:
                                内环境左环境结论 = '凶'
                            elif 日支与月地支作用关系 in ['受制关系', '不旺不弱关系'] and 月支与年地支作用关系 == '生扶关系':
                                内环境左环境结论 = '凶'
                            elif 日支与月地支作用关系 in ['受制关系', '不旺不弱关系'] and 月支与年地支作用关系 in ['受制关系', '不旺不弱关系']:
                                内环境左环境结论 = '吉'
                        elif 内环境 == '凶':
                            if 日支与月地支作用关系 == '生扶关系' and 月支与年地支作用关系 == '生扶关系':
                                内环境左环境结论 = '凶'
                            elif 日支与月地支作用关系 == '生扶关系' and 月支与年地支作用关系 in ['受制关系', '不旺不弱关系']:
                                内环境左环境结论 = '吉'
                            elif 日支与月地支作用关系 in ['受制关系', '不旺不弱关系'] and 月支与年地支作用关系 == '生扶关系':
                                内环境左环境结论 = '吉'
                            elif 日支与月地支作用关系 in ['受制关系', '不旺不弱关系'] and 月支与年地支作用关系 in ['受制关系', '不旺不弱关系']:
                                内环境左环境结论 = '凶'

                    # 检查是否有镜像，需要反转结论
                    if 是否有镜像 == '有镜像':
                        if 内环境左环境结论 == '吉':
                            内环境左环境结论 = '凶'
                        elif 内环境左环境结论 == '凶':
                            内环境左环境结论 = '吉'

                    # 将内环境左环境结论记录到属性子字典
                    属性子字典['内环境左环境'] = 内环境左环境结论

                内环境左环境结论 = 属性子字典.get('内环境左环境', '')
                是正十神 = 十神 in ['正官', '正印', '正财', '伤官', '劫财']
                if (self.性别 == '男' and 是正十神) or (self.性别 == '女' and not 是正十神):
                    环境类型 = "社会环境的内环境"
                else:
                    环境类型 = "内心环境的内环境"
                作用链路过程 = f"未现十神：{十神} - {天干名} - 内环境左环境：{内环境左环境结论} - {环境类型}:{内环境左环境结论}"
                self.收集断语(作用链路过程)
                print(作用链路过程)

                # 添加推导过程的打印
                if 窗口位置 != '年干':
                    左侧地支名字 = self.本命盘四个地支名字列表[窗口索引 - 1]
                    同柱地支名字 = self.本命盘四个地支名字列表[窗口索引]
                    生制关系 = "生" if 生扶受制关系 == '生扶关系' else "制"
                    作用链路过程 = f"🔍「未现十神の内环境的左环境」推导过程：【{左侧地支}】【{左侧地支名字}】【{生制关系}】【{同柱地支}】【{同柱地支名字}】，【{窗口位置}】【{窗口名字}】【{十神}】的内环境【{内环境}】，∴未现十神【{天干名}】【{十神}】的内环境的左环境（{环境类型}）【{内环境左环境结论}】"
                    self.收集断语(作用链路过程)
                    print(作用链路过程)
                else:
                    日支名字 = self.本命盘四个地支名字列表[2]
                    月支名字 = self.本命盘四个地支名字列表[1]
                    年支名字 = self.本命盘四个地支名字列表[0]
                    日月关系 = "生" if 日支与月地支作用关系 == '生扶关系' else "制"
                    月年关系 = "生" if 月支与年地支作用关系 == '生扶关系' else "制"
                    作用链路过程 = f"🔍「未现十神の内环境的左环境」推导过程：∵【日支】【{日支名字}】【{日月关系}】【月支】【{月支名字}】，【月支】【{月支名字}】【{月年关系}】【年支】【{年支名字}】，【{窗口位置}】【{窗口名字}】【{十神}】的内环境【{内环境}】，∴未现十神【{天干名}】【{十神}】的内环境的左环境（{环境类型}）【{内环境左环境结论}】"
                    self.收集断语(作用链路过程)
                    print(作用链路过程)

            内环境左环境结论字典 = {}
            for 天干名, 属性子字典 in self.未现正偏十神主字典.items():
                窗口名字 = 属性子字典.get('窗口名字')
                十神 = 属性子字典.get('十神', '')
                内环境 = 属性子字典.get('内环境', '')
                窗口位置 = next((位置 for 位置, 信息 in self.八字信息主字典.items() if 信息.get('名字') == 窗口名字), None)
                
                if 窗口位置 == '年干':
                    # 特殊情况：窗口在年干
                    内环境左环境结论字典[天干名] = {
                        '内环境左环境': 属性子字典['内环境左环境'],
                        '作用路径': f"🔍「未现十神の内环境の左环境」推导过程：∵【日支】【{日支名字}】【{日月关系}】【月支】【{月支名字}】，【月支】【{月支名字}】【{月年关系}】【年支】【{年支名字}】，【{窗口位置}】【{窗口名字}】【{十神}】的内环境【{内环境}】，∴未现十神【{天干名}】【{十神}】的内环境的左环境（{环境类型}）【{内环境左环境结论}】"
                    }
                else:
                    # 普通情况
                    内环境左环境结论字典[天干名] = {
                        '内环境左环境': 属性子字典['内环境左环境'],
                        '作用路径': f"🔍「未现十神の内环境の左环境」推导过程：【{左侧地支}】【{左侧地支名字}】【{生制关系}】【{同柱地支}】【{同柱地支名字}】，【{窗口位置}】【{窗口名字}】【{十神}】的内环境【{内环境}】，∴未现十神【{天干名}】【{十神}】的内环境的左环境（{环境类型}）【{内环境左环境结论}】"
                    }
            return 内环境左环境结论字典
        分析未现天干十神的内环境的左环境()

        # 9.12 分析未现天干十神的内环境的右环境
        def 分析未现天干十神的内环境的右环境():
            天干顺序 = ['年干', '月干', '日干', '时干']
            地支顺序 = ['年支', '月支', '日支', '时支']

            for 天干名, 属性子字典 in self.未现正偏十神主字典.items():
                十神 = 属性子字典.get('十神', '')
                内环境 = 属性子字典.get('内环境', '')
                窗口名字 = 属性子字典.get('窗口名字', '')
                是否有镜像 = 属性子字典.get('是否有镜像', '')

                if not 窗口名字 or not 内环境:
                    属性子字典['内环境右环境'] = '未知'
                    continue

                # 找出窗口名字对应的干支位置
                窗口位置 = None
                for 位置, 干名 in zip(天干顺序, self.本命盘四个地支名字列表):
                    if 干名 == 窗口名字:
                        窗口位置 = 位置
                        break

                if 窗口位置:
                    窗口索引 = 天干顺序.index(窗口位置)
                    同柱地支 = 地支顺序[窗口索引]

                    if 窗口位置 != '时干':
                        右侧地支 = 地支顺序[窗口索引 + 1]
                        生扶受制关系 = self.判断两者是否生扶受制(右侧地支, 同柱地支)

                        if 内环境 == '吉':
                            if 生扶受制关系 == '生扶关系':
                                内环境右环境结论 = '吉'
                            elif 生扶受制关系 in ['受制关系', '不旺不弱关系']:
                                内环境右环境结论 = '凶'
                        elif 内环境 == '凶':
                            if 生扶受制关系 == '生扶关系':
                                内环境右环境结论 = '凶'
                            elif 生扶受制关系 in ['受制关系', '不旺不弱关系']:
                                内环境右环境结论 = '吉'
                    else:
                        # 特殊情况：窗口十神在时干
                        日支与时地支作用关系 = self.判断两者是否生扶受制('日支', '时支')
                        月支与日地支作用关系 = self.判断两者是否生扶受制('月支', '日支')

                        if 内环境 == '吉':
                            if 日支与时地支作用关系 == '生扶关系' and 月支与日地支作用关系 == '生扶关系':
                                内环境右环境结论 = '吉'
                            elif 日支与时地支作用关系 == '生扶关系' and 月支与日地支作用关系 in ['受制关系', '不旺不弱关系']:
                                内环境右环境结论 = '凶'
                            elif 日支与时地支作用关系 in ['受制关系', '不旺不弱关系'] and 月支与日地支作用关系 == '生扶关系':
                                内环境右环境结论 = '凶'
                            elif 日支与时地支作用关系 in ['受制关系', '不旺不弱关系'] and 月支与日地支作用关系 in ['受制关系', '不旺不弱关系']:
                                内环境右环境结论 = '吉'
                        elif 内环境 == '凶':
                            if 日支与时地支作用关系 == '生扶关系' and 月支与日地支作用关系 == '生扶关系':
                                内环境右环境结论 = '凶'
                            elif 日支与时地支作用关系 == '生扶关系' and 月支与日地支作用关系 in ['受制关系', '不旺不弱关系']:
                                内环境右环境结论 = '吉'
                            elif 日支与时地支作用关系 in ['受制关系', '不旺不弱关系'] and 月支与日地支作用关系 == '生扶关系':
                                内环境右环境结论 = '吉'
                            elif 日支与时地支作用关系 in ['受制关系', '不旺不弱关系'] and 月支与日地支作用关系 in ['受制关系', '不旺不弱关系']:
                                内环境右环境结论 = '凶'

                    # 检查是否有镜像，需要反转结论
                    if 是否有镜像 == '有镜像':
                        if 内环境右环境结论 == '吉':
                            内环境右环境结论 = '凶'
                        elif 内环境右环境结论 == '凶':
                            内环境右环境结论 = '吉'

                    # 将内环境右环境结论记录到属性子字典
                    属性子字典['内环境右环境'] = 内环境右环境结论

                内环境右环境结论 = 属性子字典.get('内环境右环境', '')
                是正十神 = 十神 in ['正官', '正印', '正财', '伤官', '劫财']
                if (self.性别 == '男' and 是正十神) or (self.性别 == '女' and not 是正十神):
                    环境类型 = "内心环境的内环境"
                else:
                    环境类型 = "社会环境的内环境"
                作用链路过程 = f"未现十神：{十神} - {天干名} - 内环境右环境：{内环境右环境结论} - {环境类型}:{内环境右环境结论}"
                self.收集断语(作用链路过程)
                print(作用链路过程)
                
                # 添加推导过程的打印
                if 窗口位置 != '时干':
                    右侧地支名字 = self.本命盘四个地支名字列表[窗口索引 + 1]
                    同柱地支名字 = self.本命盘四个地支名字列表[窗口索引]
                    生制关系 = "生" if 生扶受制关系 == '生扶关系' else "制"
                    作用链路过程 = f"🔍「未现十神の内环境的右环境」推导过程：∵【{右侧地支}】【{右侧地支名字}】【{生制关系}】【{同柱地支}】【{同柱地支名字}】，【{窗口位置}】【{窗口名字}】【{十神}】的内环境【{内环境}】，∴未现十神【{天干名}】【{十神}】的内环境的右环境（{环境类型}）【{内环境右环境结论}】"
                    self.收集断语(作用链路过程)
                    print(作用链路过程)
                else:
                    日支名字 = self.本命盘四个地支名字列表[2]
                    月支名字 = self.本命盘四个地支名字列表[1]
                    时支名字 = self.本命盘四个地支名字列表[3]
                    日时关系 = "生" if 日支与时地支作用关系 == '生扶关系' else "制"
                    月日关系 = "生" if 月支与日地支作用关系 == '生扶关系' else "制"
                    作用链路过程 = f"🔍「未现十神の内环境的右环境」推导过程：∵【月支】【{月支名字}】【{月日关系}】【日支】【{日支名字}】，【日支】【{日支名字}】【{日时关系}】【时支】【{时支名字}】，【{窗口位置}】【{窗口名字}】【{十神}】的内环境【{内环境}】，∴未现十神【{天干名}】【{十神}】的内环境的右环境（{环境类型}）【{内环境右环境结论}】"
                    self.收集断语(作用链路过程)
                    print(作用链路过程)
        
            内环境右环境结论字典 = {}
            for 天干名, 属性子字典 in self.未现正偏十神主字典.items():
                窗口名字 = 属性子字典.get('窗口名字')
                十神 = 属性子字典.get('十神', '')
                内环境 = 属性子字典.get('内环境', '')
                窗口位置 = next((位置 for 位置, 信息 in self.八字信息主字典.items() if 信息.get('名字') == 窗口名字), None)
                
                if 窗口位置 == '时干':
                    # 特殊情况：窗口在时干
                    内环境右环境结论字典[天干名] = {'内环境右环境': 属性子字典['内环境右环境'],
                        '作用路径': f"🔍「未现十神の内环境の右环境」推导过程：∵【月支】【{月支名字}】【{月日关系}】【日支】【{日支名字}】，【日支】【{日支名字}】【{日时关系}】【时支】【{时支名字}】，【{窗口位置}】【{窗口名字}】【{十神}】的内环境【{内环境}】，∴未现十神【{天干名}】【{十神}】的内环境的右环境（{环境类型}）【{内环境右环境结论}】"}
                else:
                    # 普通情况
                    内环境右环境结论字典[天干名] = {'内环境右环境': 属性子字典['内环境右环境'],
                        '作用路径': f"🔍「未现十神の内环境の右环境」推导过程：∵【{右侧地支}】【{右侧地支名字}】【{生制关系}】【{同柱地支}】【{同柱地支名字}】，【{窗口位置}】【{窗口名字}】【{十神}】的内环境【{内环境}】，∴未现十神【{天干名}】【{十神}】的内环境的右环境（{环境类型}）【{内环境右环境结论}】"}
            return 内环境右环境结论字典
        分析未现天干十神的内环境的右环境()






        # 打印未现十神信息
        for 名字, 属性 in self.未现正偏十神主字典.items():
            self.收集断语(f"未现十神的忌用神信息:【{名字}】- 【{属性['十神']}】 - 【{属性['忌用神归属']}】")

        def 判断日主自身状态():   #根据格局判断日主是用神还是忌神，并更新GUI显示
            import contextlib
            日干标签索引 = 2
            # 根据格局判断日主状态
            if 格局 in ['从强格局', '身弱格局']:
                self.八字信息主字典['日干']['忌用神归属'] = '用神'
                天干_十神_标签 = 天干_十神_标签_列表[日干标签索引]
                十神 = self.八字信息主字典['日干']['十神']
                天干_十神_标签.config(text=f"{十神}（用神）", fg='#da61cd')
            elif 格局 in ['从弱格局', '身强格局']:
                self.八字信息主字典['日干']['忌用神归属'] = '忌神'
                天干_十神_标签 = 天干_十神_标签_列表[日干标签索引]
                十神 = self.八字信息主字典['日干']['十神']
                天干_十神_标签.config(text=f"{十神}（忌神）", fg='#52577d')
            # 判断日干的左右环境
            月干生扶受制 = self.判断两者是否生扶受制('月干', '日干')
            时干生扶受制 = self.判断两者是否生扶受制('时干', '日干')
            日支生扶受制 = self.判断两者是否生扶受制('日支', '日干')
            月支生扶受制 = self.判断两者是否生扶受制('月支', '日支')
            时支生扶受制 = self.判断两者是否生扶受制('时支', '日支')
            # 判断日干左右环境
            日干忌用神归属 = self.八字信息主字典['日干']['忌用神归属']
            # 左环境判断
            if (日干忌用神归属 == '用神' and 月干生扶受制 == '生扶关系') or \
            (日干忌用神归属 == '忌神' and 月干生扶受制 == '受制关系'):
                日干左环境 = '吉'
            else:
                日干左环境 = '凶'
                
            # 右环境判断
            if (日干忌用神归属 == '用神' and 时干生扶受制 == '生扶关系') or \
            (日干忌用神归属 == '忌神' and 时干生扶受制 == '受制关系'):
                日干右环境 = '吉'
            else:
                日干右环境 = '凶'

            # 内环境判断
            if (日干忌用神归属 == '用神' and 日支生扶受制 == '生扶关系') or \
            (日干忌用神归属 == '忌神' and 日支生扶受制 == '受制关系'):
                日干内环境 = '吉'
            else:
                日干内环境 = '凶'

            # 内环境的左右环境判断
            if (日干内环境 == '吉' and 月支生扶受制 == '生扶关系') or \
            (日干内环境 == '凶' and 月支生扶受制 == '受制关系'):
                内环境左环境 = '吉'
            else:
                内环境左环境 = '凶'

            if (日干内环境 == '吉' and 时支生扶受制 == '生扶关系') or \
            (日干内环境 == '凶' and 时支生扶受制 == '受制关系'):
                内环境右环境 = '吉'
            else:
                内环境右环境 = '凶'
            
            with contextlib.redirect_stdout(None):
                # 打印结论
                月干关系 = "生" if 月干生扶受制 == '生扶关系' else "制"
                时干关系 = "生" if 时干生扶受制 == '生扶关系' else "制"
                日支关系 = "生" if 日支生扶受制 == '生扶关系' else "制"
                月支关系 = "生" if 月支生扶受制 == '生扶关系' else "制"
                时支关系 = "生" if 时支生扶受制 == '生扶关系' else "制"
                # 在函数末尾添加，存储环境信息到self.八字信息主字典
                self.八字信息主字典['日干'].update({'左环境': 日干左环境,'右环境': 日干右环境,'内环境': 日干内环境,'内环境左环境': 内环境左环境,'内环境右环境': 内环境右环境})

                作用链路过程 =f"∵日干为{日干忌用神归属}，月干【{月干关系}】日干，时干【{时干关系}】日干，∴日干的左环境为【{日干左环境}】，日干的右环境为【{日干右环境}】"
                self.收集断语(作用链路过程)
                print(作用链路过程)

                作用链路过程 =f"∵日干为{日干忌用神归属}，日支【{日支关系}】日干，∴日干的内环境为【{日干内环境}】。∵月支【{月支关系}】日支，时支【{时支关系}】日支，∴日干内环境的左环境为【{内环境左环境}】，日干内环境的右环境为【{内环境右环境}】。"
                self.收集断语(作用链路过程)
                print(作用链路过程)
            
            # 在函数末尾，构建并返回结论字典
            结论信息 = {'环境信息': {'左环境': 日干左环境,'右环境': 日干右环境,'内环境': 日干内环境,'内环境左环境': 内环境左环境,'内环境右环境': 内环境右环境},
                '作用路径说明': {'外环境说明': f"∵日干为{日干忌用神归属}，月干【{月干关系}】日干，时干【{时干关系}】日干，∴日干的左环境为【{日干左环境}】，日干的右环境为【{日干右环境}】",'内环境说明': f"∵日干为{日干忌用神归属}，日支【{日支关系}】日干，∴日干的内环境为【{日干内环境}】",'内环境扩展说明': f"∵月支【{月支关系}】日支，时支【{时支关系}】日支，∴日干内环境的左环境为【{内环境左环境}】，日干内环境的右环境为【{内环境右环境}】"}}
            
            self.八字信息主字典['日干'].update(结论信息['环境信息'])
            return 结论信息
        判断日主自身状态()



        # 3.获取大运信息并添加到列表(现在没有GUI列表框了, 我们用一个列表存储)
        大运信息列表 = []
        流年天干字典 = {}
        流年地支字典 = {}

        is_male = (self.性别 == "男")
        yun = self.ba.getYun(not is_male)

        for dayun in yun.getDaYun()[1:]:
            age = dayun.getStartAge()
            ganzhi = dayun.getGanZhi()
            year_str = '📒大运'
            大运信息 = f"{age}岁  {year_str}  {ganzhi}"
            # 原GUI代码: 大运列表框.insert(tk.END, 大运信息)
            # 不使用GUI，直接append到列表中:
            大运信息列表.append(大运信息)

            大运天干 = ganzhi[0]
            大运地支 = ganzhi[1]
            if 大运天干 not in self.大运天干字典:
                self.大运天干字典[大运天干] = {"阴阳属性": self.计算阴阳属性(大运天干), "旺弱状态": "", "是否实神": ""}
            if 大运地支 not in self.大运地支字典:
                self.大运地支字典[大运地支] = {
                    "阴阳属性": self.计算阴阳属性(大运地支),
                    "旺弱状态": "",
                    "是否实神": "",
                    "是否空亡": "空亡" if 大运地支 in 地支空亡字典[self.zhus[2]] else "不空亡"
                }
                if self.大运地支字典[大运地支]["是否空亡"] == "空亡":
                    self.大运地支字典[大运地支]["旺弱状态"] = "不弱不旺"

        # 原代码定义的函数，与GUI相关的操作都需要去掉或注释。
        # 我们保留函数定义和内部逻辑处理(字典计算等)，但删除或注释掉GUI控件相关调用。

        self.当前选中大运 = None       # 占位变量，将来可通过机器人指令设置
        self.当前选中流年列表 = []     # 占位变量，将来可通过机器人指令选择流年

        def 更新流年列表(event=None):
            # 原GUI代码: 流年列表框.delete(0, tk.END)
            流年天干字典.clear()
            流年地支字典.clear()
            if self.当前选中大运: 
                # 原GUI代码：流年提示标签.pack_forget()
                # age和原局元素名字列表的逻辑保留
                age = int(self.当前选中大运.split('岁')[0])

                原局元素名字列表 = []
                for 位置, 信息 in self.八字信息主字典.items():
                    if '支' in 位置 and 信息.get('是否空亡') == '空亡':
                        continue
                    名字 = 信息.get('名字')
                    if 名字:
                        原局元素名字列表.append(名字)

                for dayun in yun.getDaYun()[1:]:
                    if dayun.getStartAge() == age:
                        for liunian in dayun.getLiuNian():
                            current_age = liunian.getAge()
                            if age <= current_age < age + 10:
                                year = str(liunian.getYear())
                                流年天干 = liunian.getGanZhi()[0]
                                流年地支 = liunian.getGanZhi()[1]
                                ganzhi = 流年天干 + 流年地支
                                流年信息 = f"{current_age}岁  {year}  {ganzhi}"
                                # 原GUI代码：流年列表框.insert(tk.END, 流年信息)
                                # 暂时保存在字典或列表中，需要的话可新建一个流年信息列表
                                # 这里不强求，因为未来会用机器人对话来选择流年
                                
                                if 流年天干 not in 流年天干字典:
                                    流年天干字典[流年天干] = {
                                        "阴阳属性": self.计算阴阳属性(流年天干),
                                        "旺弱状态": "",
                                        "是否实神": "实神" if 流年天干 in 原局元素名字列表 else "虚神"
                                    }

                                if 流年地支 not in 流年地支字典:
                                    流年地支字典[流年地支] = {
                                        "阴阳属性": self.计算阴阳属性(流年地支),
                                        "旺弱状态": "",
                                        "是否实神": "实神" if 流年地支 in 原局元素名字列表 else "虚神",
                                        "是否空亡": "空亡" if 流年地支 in 地支空亡字典[self.zhus[2]] else "不空亡"
                                    }
                                    if 流年地支字典[流年地支]["是否空亡"] == "空亡":
                                        流年地支字典[流年地支]["旺弱状态"] = "不弱不旺"
            else:
                # 原GUI代码：流年提示标签.pack()、流年列表框.pack_forget()、流年按钮.configure(text="流年▼")
                pass

        def 更新已选流年显示():    #更新已选流年标签的显示内容
            self.当前选中流年列表
            pass    
            更新已选流年显示()

        def 处理空亡特殊情况():
            # 处理大运地支空亡的情况
            for 大运地支, 属性字典 in self.大运地支字典.items():
                if 属性字典['是否空亡'] == '空亡':
                    # 空亡地支状态设为不弱不旺
                    属性字典['旺弱状态'] = '不弱不旺'
                    大运地支阴阳 = 属性字典['阴阳属性']
                    # 遍历原局地支，处理大运空亡地支对原局地支的作用
                    for 原局地支键 in ['年支', '月支', '日支', '时支']:
                        原局地支阴阳 = self.八字信息主字典[原局地支键]['阴阳属性']
                        生扶受制关系 = self.判断两者是否生扶受制(大运地支, 原局地支键)
                        # 如果原局地支是空亡的，直接设为不弱不旺并跳过
                        if self.八字信息主字典[原局地支键]['是否空亡'] == '空亡':
                            self.八字信息主字典[原局地支键]['旺弱状态'] = '不弱不旺'
                            continue
                        # 处理大运空亡地支对原局地支的作用
                        if 生扶受制关系 == '受制关系':
                            self.八字信息主字典[原局地支键]['旺弱状态'] = '旺'
                        elif 生扶受制关系 == '生扶关系':
                            self.八字信息主字典[原局地支键]['旺弱状态'] = '弱'
            # 处理原局空亡地支的特殊情况
            for 地支键, 地支信息 in self.八字信息主字典.items():
                if 地支信息.get('是否空亡') == '空亡':
                    # 设置空亡地支状态为不弱不旺
                    地支信息['旺弱状态'] = '不弱不旺'
                    # 找到与空亡地支同柱的天干
                    天干键 = 地支键.replace('支', '干')
                    # 更新同柱天干的环境状态
                    self.八字信息主字典[天干键]['内环境'] = '不吉不凶'
                    self.八字信息主字典[天干键]['内环境左环境'] = '不吉不凶'
                    self.八字信息主字典[天干键]['内环境右环境'] = '不吉不凶'
                    # 更新以该天干为窗口的未现十神的环境状态
                    天干名字 = self.八字信息主字典[天干键]['名字']
                    for 未现十神, 属性 in self.未现正偏十神主字典.items():
                        if 属性.get('窗口名字') == 天干名字:
                            属性['内环境'] = '不吉不凶'
                            属性['内环境左环境'] = '不吉不凶'
                            属性['内环境右环境'] = '不吉不凶'
        def 处理实神情况():
            原局元素名字列表 = []
            for 位置, 信息 in self.八字信息主字典.items():
                # 跳过空亡的地支
                if '支' in 位置 and 信息.get('是否空亡') == '空亡':
                    continue
                # 使用.get()方法，如果没有'名字'键就跳过
                名字 = 信息.get('名字')
                if 名字:  # 只有当名字存在时才添加
                    原局元素名字列表.append(名字)
            # 检查大运天干是否为实神
            for 天干, 属性 in self.大运天干字典.items():
                if 天干 in 原局元素名字列表:
                    属性['是否实神'] = '实神'
                else:
                    属性['是否实神'] = '虚神'
            # 检查大运地支是否为实神
            for 地支, 属性 in self.大运地支字典.items():
                if 地支 in 原局元素名字列表:
                    属性['是否实神'] = '实神'
                else:
                    属性['是否实神'] = '虚神'
        def 更新环境吉凶结论():
        # 处理已现十神的各种环境
            for 天干键, 天干信息 in self.八字信息主字典.items():
                if '干' not in 天干键:  # 跳过地支
                    continue
                    
                # 获取相关状态
                外环境 = 天干信息.get('外环境', '')
                内环境 = 天干信息.get('内环境', '')
                左环境 = 天干信息.get('左环境', '')
                右环境 = 天干信息.get('右环境', '')
                内环境左环境 = 天干信息.get('内环境左环境', '')
                内环境右环境 = 天干信息.get('内环境右环境', '')

                # 处理已现十神的外环境
                if 外环境 in ['吉', '凶']:
                    旺弱状态 = 天干信息.get('旺弱状态', '')
                    if '弱' in 旺弱状态:  # 包括 "弱" 和 "弱+"
                        新环境 = '凶' if 外环境 == '吉' else '吉'
                        天干信息['外环境'] = 新环境 + "+" if "+" in 旺弱状态 else 新环境

                # 处理已现十神的内环境
                if 内环境 in ['吉', '凶']:
                    同柱地支键 = 天干键.replace('干', '支')
                    地支旺弱状态 = self.八字信息主字典[同柱地支键].get('旺弱状态', '')
                    if '弱' in 地支旺弱状态:
                        新环境 = '凶' if 内环境 == '吉' else '吉'
                        天干信息['内环境'] = 新环境 + "+" if "+" in 地支旺弱状态 else 新环境

                # 处理已现十神的左环境
                if 左环境 in ['吉', '凶']:
                    if 天干键 == '年干':
                        参考天干 = '日干'
                    else:
                        天干顺序 = ['年干', '月干', '日干', '时干']
                        当前索引 = 天干顺序.index(天干键)
                        参考天干 = 天干顺序[当前索引 - 1] if 当前索引 > 0 else ''
                    
                    if 参考天干:
                        参考旺弱状态 = self.八字信息主字典[参考天干].get('旺弱状态', '')
                        if '弱' in 参考旺弱状态:
                            新环境 = '凶' if 左环境 == '吉' else '吉'
                            天干信息['左环境'] = 新环境 + "+" if "+" in 参考旺弱状态 else 新环境

                # 处理已现十神的右环境
                if 右环境 in ['吉', '凶']:
                    if 天干键 == '时干':
                        参考天干 = '月干'
                    else:
                        天干顺序 = ['年干', '月干', '日干', '时干']
                        当前索引 = 天干顺序.index(天干键)
                        参考天干 = 天干顺序[当前索引 + 1] if 当前索引 < 3 else ''
                    if 参考天干:
                        参考旺弱状态 = self.八字信息主字典[参考天干].get('旺弱状态', '')
                        if '弱' in 参考旺弱状态:
                            新环境 = '凶' if 右环境 == '吉' else '吉'
                            天干信息['右环境'] = 新环境 + "+" if "+" in 参考旺弱状态 else 新环境

                # 处理已现十神的内环境的左环境和右环境
                for 环境键, 环境值 in [('内环境左环境', 内环境左环境), ('内环境右环境', 内环境右环境)]:
                    if 环境值 in ['吉', '凶']:
                        同柱地支键 = 天干键.replace('干', '支')
                        地支旺弱状态 = self.八字信息主字典[同柱地支键].get('旺弱状态', '')
                        if '弱' in 地支旺弱状态:
                            新环境 = '凶' if 环境值 == '吉' else '吉'
                            天干信息[环境键] = 新环境 + "+" if "+" in 地支旺弱状态 else 新环境

                #处理日干环境吉凶结论
                if 天干键 == '日干': 
                    月干旺弱状态 = self.八字信息主字典['月干'].get('旺弱状态', '') 
                    if '弱' in 月干旺弱状态:     # 处理日干左环境（受月干影响）
                        新环境 = '凶' if 天干信息['左环境'] == '吉' else '吉'
                        天干信息['左环境'] = 新环境 + "+" if "+" in 月干旺弱状态 else 新环境

                    时干旺弱状态 = self.八字信息主字典['时干'].get('旺弱状态', '')   # 处理日干右环境（受时干影响）
                    if '弱' in 时干旺弱状态:
                        新环境 = '凶' if 天干信息['右环境'] == '吉' else '吉'
                        天干信息['右环境'] = 新环境 + "+" if "+" in 时干旺弱状态 else 新环境

                    日支旺弱状态 = self.八字信息主字典['日支'].get('旺弱状态', '')   # 处理日干内环境（受日支影响）
                    if '弱' in 日支旺弱状态:
                        新环境 = '凶' if 天干信息['内环境'] == '吉' else '吉'
                        天干信息['内环境'] = 新环境 + "+" if "+" in 日支旺弱状态 else 新环境

                    if '弱' in 日支旺弱状态:
                        for 环境键 in ['内环境左环境', '内环境右环境']:    # 处理内环境的左右环境（仍然受日支状态影响）
                            新环境 = '凶' if 天干信息[环境键] == '吉' else '吉'
                            天干信息[环境键] = 新环境 + "+" if "+" in 日支旺弱状态 else 新环境
                
            # 处理未现十神的各种环境
            for 天干名, 属性子字典 in self.未现正偏十神主字典.items():
                窗口名字 = 属性子字典.get('窗口名字', '')
                if not 窗口名字:
                    continue
                # 获取窗口十神所在位置和相关信息
                窗口位置 = next((位置 for 位置, 信息 in self.八字信息主字典.items() if 信息['名字'] == 窗口名字), None)
                if not 窗口位置:
                    continue
                # 处理未现十神的外环境
                外环境 = 属性子字典.get('外环境', '')
                if 外环境 in ['吉', '凶']:
                    窗口旺弱状态 = self.八字信息主字典[窗口位置].get('旺弱状态', '')
                    if '弱' in 窗口旺弱状态:
                        新环境 = '凶' if 外环境 == '吉' else '吉'
                        属性子字典['外环境'] = 新环境 + "+" if "+" in 窗口旺弱状态 else 新环境
                # 处理未现十神的内环境
                内环境 = 属性子字典.get('内环境', '')
                if 内环境 in ['吉', '凶']:
                    窗口地支键 = 窗口位置.replace('干', '支')
                    地支旺弱状态 = self.八字信息主字典[窗口地支键].get('旺弱状态', '')
                    if '弱' in 地支旺弱状态:
                        新环境 = '凶' if 内环境 == '吉' else '吉'
                        属性子字典['内环境'] = 新环境 + "+" if "+" in 地支旺弱状态 else 新环境
                # 处理未现十神的左环境
                左环境 = 属性子字典.get('左环境', '')
                if 左环境 in ['吉', '凶']:
                    if 窗口位置 == '年干':
                        参考旺弱状态 = self.八字信息主字典['日干'].get('旺弱状态', '')
                    else:
                        天干顺序 = ['年干', '月干', '日干', '时干']
                        窗口索引 = 天干顺序.index(窗口位置)
                        左边位置 = 天干顺序[窗口索引 - 1] if 窗口索引 > 0 else None
                        参考旺弱状态 = self.八字信息主字典[左边位置].get('旺弱状态', '') if 左边位置 else ''

                    if '弱' in 参考旺弱状态:
                        新环境 = '凶' if 左环境 == '吉' else '吉'
                        属性子字典['左环境'] = 新环境 + "+" if "+" in 参考旺弱状态 else 新环境
                # 处理未现十神的右环境
                右环境 = 属性子字典.get('右环境', '')
                if 右环境 in ['吉', '凶']:
                    if 窗口位置 == '时干':
                        参考旺弱状态 = self.八字信息主字典['月干'].get('旺弱状态', '')
                    else:
                        天干顺序 = ['年干', '月干', '日干', '时干']
                        窗口索引 = 天干顺序.index(窗口位置)
                        右边位置 = 天干顺序[窗口索引 + 1] if 窗口索引 < 3 else None
                        参考旺弱状态 = self.八字信息主字典[右边位置].get('旺弱状态', '') if 右边位置 else ''

                    if '弱' in 参考旺弱状态:
                        新环境 = '凶' if 右环境 == '吉' else '吉'
                        属性子字典['右环境'] = 新环境 + "+" if "+" in 参考旺弱状态 else 新环境
                # 处理未现十神的内环境的左右环境
                for 环境键, 特殊位置 in [('内环境左环境', '年干'), ('内环境右环境', '时干')]:
                    环境值 = 属性子字典.get(环境键, '')
                    if 环境值 in ['吉', '凶']:
                        窗口地支键 = 窗口位置.replace('干', '支')
                        if 窗口位置 == 特殊位置:
                            参考地支键 = '日支'
                        else:
                            地支顺序 = ['年支', '月支', '日支', '时支']
                            窗口索引 = 地支顺序.index(窗口地支键)
                            参考索引 = 窗口索引 - 1 if '左' in 环境键 else 窗口索引 + 1
                            参考地支键 = 地支顺序[参考索引] if 0 <= 参考索引 < 4 else None
                        if 参考地支键:
                            参考旺弱状态 = self.八字信息主字典[参考地支键].get('旺弱状态', '')
                            if '弱' in 参考旺弱状态:
                                新环境 = '凶' if 环境值 == '吉' else '吉'
                                属性子字典[环境键] = 新环境 + "+" if "+" in 参考旺弱状态 else 新环境
        def 更新干支旺弱状态(大运干支, 原局干支, 大运阴阳, 原局阴阳):
            生扶受制关系 = self.判断两者是否生扶受制(大运干支, 原局干支)
            是同性作用 = (大运阴阳 == 原局阴阳)
            
            # 判断是否为实神
            是实神 = False
            if 大运干支 in self.大运天干字典:
                是实神 = self.大运天干字典[大运干支]['是否实神'] == '实神'
            elif 大运干支 in self.大运地支字典:
                是实神 = self.大运地支字典[大运干支]['是否实神'] == '实神'
            
            # 确定基础旺弱状态
            if 生扶受制关系 == '生扶关系':
                基础状态 = "旺" if 是同性作用 else "弱"
            elif 生扶受制关系 == '受制关系':
                基础状态 = "弱" if 是同性作用 else "旺"
            
            # 如果是实神，添加"+"标记
            最终状态 = 基础状态 + "+" if 是实神 else 基础状态
            self.八字信息主字典[原局干支]['旺弱状态'] = 最终状态 
        def 处理大运作用():     # 更新原局干支的旺弱状态
            self.当前选中大运
            if self.当前选中大运:
                print(f"🥔🥔🥔选中大运: {self.当前选中大运}")
                print("🥔🥔🥔开始处理大运作用……")
                处理空亡特殊情况()
                处理实神情况() 
                大运干支 = 大运信息.split()[-1]
                大运天干 = 大运干支[0]
                大运地支 = 大运干支[1]
                # 添加安全检查
                if 大运天干 not in self.大运天干字典:
                    print(f"警告：{大运天干}不在self.大运天干字典中")
                if 大运地支 not in self.大运地支字典:
                    print(f"警告：{大运地支}不在self.大运地支字典中")
                大运天干阴阳 = self.大运天干字典[大运天干]['阴阳属性']
                大运地支阴阳 = self.大运地支字典[大运地支]['阴阳属性']
                for 原局天干 in ['年干', '月干', '日干', '时干']:
                    原局天干阴阳 = self.八字信息主字典[原局天干]['阴阳属性']
                    更新干支旺弱状态(大运天干, 原局天干, 大运天干阴阳, 原局天干阴阳)
                for 原局地支 in ['年支', '月支', '日支', '时支']:
                    原局地支阴阳 = self.八字信息主字典[原局地支]['阴阳属性']
                    更新干支旺弱状态(大运地支, 原局地支, 大运地支阴阳, 原局地支阴阳)
            else:
                print("🥔🥔🥔没有选中任何大运！")  # 调试语句
            更新环境吉凶结论()
            处理大运作用()

        def 更新大运作用后的环境结论():
            import contextlib
            self.当前选中大运
            if not self.当前选中大运:
                print("🥔🥔🥔请先选择一个大运！")  # 调试语句
                return
            大运干支 = self.当前选中大运.split()[-1]
            大运天干 = 大运干支[0]
            大运地支 = 大运干支[1]
            
            print(f"👼👼👼\n{大运干支}大运作用到原局后，原局各种环境的结论如下：")
            
            print("\n=== 😐 已现十神的环境 ===")
            with contextlib.redirect_stdout(None):
                外环境结论 = 分析天干十神的外环境吉凶()
                内环境结论 = 分析天干十神的内环境吉凶()
                左环境结论 = 分析天干十神的左环境吉凶()
                右环境结论 = 分析天干十神的右环境吉凶()
                内环境左环境结论 = 分析天干十神的内环境的左环境吉凶()
                内环境右环境结论 = 分析天干十神的内环境右环境吉凶()
            for 天干 in ['时干', '月干', '年干']:
                天干名字 = self.八字信息主字典[天干]['名字']
                十神 = self.八字信息主字典[天干]['十神']
                旺弱状态 = self.八字信息主字典[天干].get('旺弱状态', '')
                外环境 = self.八字信息主字典[天干].get('外环境', '')
                内环境 = self.八字信息主字典[天干].get('内环境', '')
                左环境 = self.八字信息主字典[天干].get('左环境', '')
                右环境 = self.八字信息主字典[天干].get('右环境', '')
                内环境左环境 = self.八字信息主字典[天干].get('内环境左环境', '')
                内环境右环境 = self.八字信息主字典[天干].get('内环境右环境', '')
                同柱地支键 = 天干.replace('干', '支')
                地支旺弱状态 = self.八字信息主字典[同柱地支键].get('旺弱状态', '')
                
                # 处理外环境
                if 旺弱状态:
                    if '弱' in 旺弱状态:
                        新环境 = '凶' if 外环境 == '吉' else '吉'
                        if '+' in 旺弱状态:
                            新环境 += '+'
                    else:
                        新环境 = 外环境
                        if '+' in 旺弱状态:
                            新环境 += '+'
                else:
                    新环境 = 外环境
                
                # 处理内环境
                if 地支旺弱状态:
                    if '弱' in 地支旺弱状态:
                        新内环境 = '凶' if 内环境 == '吉' else '吉'
                        if '+' in 地支旺弱状态:
                            新内环境 += '+'
                    else:
                        新内环境 = 内环境
                        if '+' in 地支旺弱状态:
                            新内环境 += '+'
                else:
                    新内环境 = 内环境
                
                # 处理左环境
                if 旺弱状态:
                    if '弱' in 旺弱状态:
                        新左环境 = '凶' if 左环境 == '吉' else '吉'
                        if '+' in 旺弱状态:
                            新左环境 += '+'
                    else:
                        新左环境 = 左环境
                        if '+' in 旺弱状态:
                            新左环境 += '+'
                else:
                    新左环境 = 左环境
                
                # 处理右环境
                if 旺弱状态:
                    if '弱' in 旺弱状态:
                        新右环境 = '凶' if 右环境 == '吉' else '吉'
                        if '+' in 旺弱状态:
                            新右环境 += '+'
                    else:
                        新右环境 = 右环境
                        if '+' in 旺弱状态:
                            新右环境 += '+'
                else:
                    新右环境 = 右环境
                
                # 处理内环境左环境
                if 地支旺弱状态:
                    if '弱' in 地支旺弱状态:
                        新内环境左环境 = '凶' if 内环境左环境 == '吉' else '吉'
                        if '+' in 地支旺弱状态:
                            新内环境左环境 += '+'
                    else:
                        新内环境左环境 = 内环境左环境
                        if '+' in 地支旺弱状态:
                            新内环境左环境 += '+'
                else:
                    新内环境左环境 = 内环境左环境
                    
                # 处理内环境右环境
                if 地支旺弱状态:
                    if '弱' in 地支旺弱状态:
                        新内环境右环境 = '凶' if 内环境右环境 == '吉' else '吉'
                        if '+' in 地支旺弱状态:
                            新内环境右环境 += '+'
                    else:
                        新内环境右环境 = 内环境右环境
                        if '+' in 地支旺弱状态:
                            新内环境右环境 += '+'
                else:
                    新内环境右环境 = 内环境右环境

                print(f"\n《原局已现十神外环境作用路径》：{外环境结论[天干]['作用路径']}")
                print(f"\n《原局已现十神内环境作用路径》：{内环境结论[天干]['作用路径']}")
                print(f"\n《原局已现十神左环境作用路径》：{左环境结论[天干]['作用路径']}")
                print(f"\n《原局已现十神右环境作用路径》：{右环境结论[天干]['作用路径']}")
                print(f"\n《原局已现十神内环境左环境作用路径》：{内环境左环境结论[天干]['作用路径']}")
                print(f"\n《原局已现十神内环境右环境作用路径》：{内环境右环境结论[天干]['作用路径']}")

                    
                # 判断是否为实神
                是实神 = False
                if 大运干支[0] in self.大运天干字典:
                    是实神 = self.大运天干字典[大运干支[0]]['是否实神'] == '实神'
                
                print(f"\n《大运作用后的外环境结果》：∵【{大运干支}】大运{'(实神)' if 是实神 else ''}作用于原局后，使【{天干}】【{天干名字}】【{十神}】状态为【{旺弱状态}】，∴【{天干}】【{天干名字}】【{十神}】外环境为【{新环境}】")
                
                print(f"\n《大运作用后的内环境结果》：∵【{大运干支}】大运{'(实神)' if 是实神 else ''}作用于原局后，使【{同柱地支键}】状态为【{地支旺弱状态}】，∴【{天干}】【{天干名字}】【{十神}】内环境为【{新内环境}】")
                
                print(f"\n《大运作用后的左环境结果》：∵【{大运干支}】大运{'(实神)' if 是实神 else ''}作用于原局后，使【{天干}】【{天干名字}】【{十神}】状态为【{旺弱状态}】，∴【{天干}】【{天干名字}】【{十神}】左环境为【{新左环境}】")

                print(f"\n《大运作用后的右环境结果》：∵【{大运干支}】大运{'(实神)' if 是实神 else ''}作用于原局后，使【{天干}】【{天干名字}】【{十神}】状态为【{旺弱状态}】，∴【{天干}】【{天干名字}】【{十神}】右环境为【{新右环境}】")

                print(f"\n《大运作用后的内环境的左环境结果》：∵【{大运干支}】大运{'(实神)' if 是实神 else ''}作用于原局后，使【{同柱地支键}】状态为【{地支旺弱状态}】，∴【{天干}】【{天干名字}】【{十神}】内环境左环境为【{新内环境左环境}】")
                
                print(f"\n《大运作用后的内环境的右环境结果》：∵【{大运干支}】大运{'(实神)' if 是实神 else ''}作用于原局后，使【{同柱地支键}】状态为【{地支旺弱状态}】，∴【{天干}】【{天干名字}】【{十神}】内环境右环境为【{新内环境右环境}】")
                
            else:
                print(f" ∴【{天干}】【{天干名字}】【{十神}】外环境为【{外环境}】")
                print(f" ∴【{天干}】【{天干名字}】【{十神}】内环境为【{内环境}】")
                print(f" ∴【{天干}】【{天干名字}】【{十神}】左环境为【{左环境}】")
                print(f" ∴【{天干}】【{天干名字}】【{十神}】右环境为【{右环境}】")
                print(f" ∴【{天干}】【{天干名字}】【{十神}】内环境左环境为【{内环境左环境}】")
                print(f" ∴【{天干}】【{天干名字}】【{十神}】内环境右环境为【{内环境右环境}】")




            print("\n=== 🫥 未现十神的环境 ===")
            with contextlib.redirect_stdout(None):
                未现外环境结论 = 分析未现天干十神的外环境吉凶()
                未现内环境结论 = 分析未现天干十神的内环境吉凶()
                未现左环境结论 = 分析未现天干十神的左环境吉凶()
                未现右环境结论 = 分析未现天干十神的右环境吉凶()
                未现内环境左环境结论 = 分析未现天干十神的内环境的左环境()
                未现内环境右环境结论 = 分析未现天干十神的内环境的右环境()

            # 获取所有未现十神的列表
            未现十神列表 = list(self.未现正偏十神主字典.keys())

            # 处理地支旺弱状态对未现十神内环境的影响
            for 天干名 in 未现十神列表:
                属性子字典 = self.未现正偏十神主字典[天干名]
                窗口名字 = 属性子字典.get('窗口名字')
                十神 = 属性子字典.get('十神') 
                窗口位置 = next((位置 for 位置, 信息 in self.八字信息主字典.items() if 信息.get('名字') == 窗口名字), None)  # 找到窗口十神对应的位置
                同柱地支键 = 窗口位置.replace('干', '支') if 窗口位置 else ''
                地支旺弱状态 = self.八字信息主字典[同柱地支键].get('旺弱状态') if 同柱地支键 else ''
                天干旺弱状态 = self.八字信息主字典[窗口位置].get('旺弱状态') if 窗口位置 else ''
                if 窗口位置:
                    地支位置 = 窗口位置.replace('干', '支')   # 获取同柱地支的位置
                    地支旺弱状态 = self.八字信息主字典[地支位置].get('旺弱状态')  # 获取地支的旺弱状态
                    天干旺弱状态 = self.八字信息主字典[窗口位置].get('旺弱状态') 
                    

                    # 如果窗口十神的天干是弱，则反转外环境吉凶
                    if '弱' in 天干旺弱状态:
                        原外环境 = 属性子字典.get('外环境', '')
                        if 原外环境 == '吉':
                            属性子字典['外环境'] = '凶'
                        elif 原外环境 == '凶':
                            属性子字典['外环境'] = '吉'
                        # 如果天干旺弱状态带有'+'，则在新内环境后也加上'+'
                        if '+' in 地支旺弱状态:
                            属性子字典['外环境'] += '+'

                    # 如果地支是弱，则反转内环境吉凶
                    if '弱' in 地支旺弱状态:
                        原内环境 = 属性子字典.get('内环境', '')
                        if 原内环境 == '吉':
                            属性子字典['内环境'] = '凶'
                        elif 原内环境 == '凶':
                            属性子字典['内环境'] = '吉'
                        # 如果地支旺弱状态带有'+'，则在新内环境后也加上'+'
                        if '+' in 地支旺弱状态:
                            属性子字典['内环境'] += '+'

                    # 处理未现十神左环境
                    天干顺序 = ['年干', '月干', '日干', '时干']
                    窗口位置 = next((位置 for 位置, 干名 in zip(天干顺序, self.本命盘四个天干名字列表) if 干名 == 窗口名字), None)
                    if 窗口位置 == '年干':
                        # 特殊情况：窗口十神在年干
                        月干旺弱状态 = self.八字信息主字典['月干'].get('旺弱状态', '')
                        日干旺弱状态 = self.八字信息主字典['日干'].get('旺弱状态', '')
                        
                        # 根据日干和月干的旺弱状态调整左环境
                        if ('弱' in 日干旺弱状态 and '弱' in 月干旺弱状态):
                            原左环境 = 属性子字典.get('左环境', '')
                            if 原左环境 == '吉':
                                属性子字典['左环境'] = '凶'
                            elif 原左环境 == '凶':
                                属性子字典['左环境'] = '吉'
                            # 如果两个旺弱状态都带有'+'，则在新左环境后也加上'+'
                            if '+' in 日干旺弱状态 and '+' in 月干旺弱状态:
                                属性子字典['左环境'] += '+'
                    else:
                        # 普通情况：找到左侧位置的旺弱状态
                        窗口索引 = 天干顺序.index(窗口位置) if 窗口位置 else -1
                        if 窗口索引 > 0:
                            左侧位置 = 天干顺序[窗口索引 - 1]
                            左侧旺弱状态 = self.八字信息主字典[左侧位置].get('旺弱状态')
                            
                            # 如果左侧位置的旺弱状态是'弱'或'弱+'，反转左环境结论
                            if '弱' in 左侧旺弱状态:
                                原左环境 = 属性子字典.get('左环境')
                                if 原左环境 == '吉':
                                    属性子字典['左环境'] = '凶'
                                elif 原左环境 == '凶':
                                    属性子字典['左环境'] = '吉'
                                # 如果旺弱状态带有'+'，则在新左环境后也加上'+'
                                if '+' in 左侧旺弱状态:
                                    属性子字典['左环境'] += '+'

                    # 处理未现十神右环境
                    if 窗口位置 == '时干':
                        # 特殊情况：窗口十神在时干
                        月干旺弱状态 = self.八字信息主字典['月干'].get('旺弱状态')
                        日干旺弱状态 = self.八字信息主字典['日干'].get('旺弱状态')
                        
                        # 根据月干和日干的旺弱状态调整右环境
                        if ('弱' in 月干旺弱状态 and '弱' in 日干旺弱状态):
                            原右环境 = 属性子字典.get('右环境')
                            if 原右环境 == '吉':
                                属性子字典['右环境'] = '凶'
                            elif 原右环境 == '凶':
                                属性子字典['右环境'] = '吉'
                            # 如果两个旺弱状态都带有'+'，则在新右环境后也加上'+'
                            if '+' in 月干旺弱状态 and '+' in 日干旺弱状态:
                                属性子字典['右环境'] += '+'
                    else:
                        # 普通情况：找到右侧位置的旺弱状态
                        窗口索引 = 天干顺序.index(窗口位置) if 窗口位置 else -1
                        if 窗口索引 < len(天干顺序) - 1:
                            右侧位置 = 天干顺序[窗口索引 + 1]
                            右侧旺弱状态 = self.八字信息主字典[右侧位置].get('旺弱状态', '')             
                            # 如果右侧位置的旺弱状态是'弱'或'弱+'，反转右环境结论
                            if '弱' in 右侧旺弱状态:
                                原右环境 = 属性子字典.get('右环境', '')
                                if 原右环境 == '吉':
                                    属性子字典['右环境'] = '凶'
                                elif 原右环境 == '凶':
                                    属性子字典['右环境'] = '吉'
                                # 如果旺弱状态带有'+'，则在新右环境后也加上'+'
                                if '+' in 右侧旺弱状态:
                                    属性子字典['右环境'] += '+'  

                    # 处理未现十神的内环境的左环境
                    if 窗口位置 == '年干':
                        # 特殊情况：窗口在年干
                        日支旺弱状态 = self.八字信息主字典['日支'].get('旺弱状态', '')
                        月支旺弱状态 = self.八字信息主字典['月支'].get('旺弱状态', '')
                        
                        if ('弱' in 日支旺弱状态 and '弱' in 月支旺弱状态):
                            原内环境左环境 = 属性子字典.get('内环境左环境', '')
                            if 原内环境左环境 == '吉':
                                属性子字典['内环境左环境'] = '凶'
                            elif 原内环境左环境 == '凶':
                                属性子字典['内环境左环境'] = '吉'
                            if '+' in 日支旺弱状态 and '+' in 月支旺弱状态:
                                属性子字典['内环境左环境'] += '+'
                    else:
                        # 普通情况
                        地支顺序 = ['年支', '月支', '日支', '时支']
                        同柱地支 = 窗口位置.replace('干', '支')
                        地支索引 = 地支顺序.index(同柱地支)
                        if 地支索引 > 0:
                            左侧地支位置 = 地支顺序[地支索引 - 1]
                            左侧地支旺弱状态 = self.八字信息主字典[左侧地支位置].get('旺弱状态', '')
                            if '弱' in 左侧地支旺弱状态:
                                原内环境左环境 = 属性子字典.get('内环境左环境', '')
                                if 原内环境左环境 == '吉':
                                    属性子字典['内环境左环境'] = '凶'
                                elif 原内环境左环境 == '凶':
                                    属性子字典['内环境左环境'] = '吉'
                                if '+' in 左侧地支旺弱状态:
                                    属性子字典['内环境左环境'] += '+'

                # 处理未现十神的内环境的右环境
                if 窗口位置 == '时干':
                    # 特殊情况：窗口在时干
                    月支旺弱状态 = self.八字信息主字典['月支'].get('旺弱状态', '')
                    日支旺弱状态 = self.八字信息主字典['日支'].get('旺弱状态', '')
                    
                    if ('弱' in 月支旺弱状态 and '弱' in 日支旺弱状态):
                        原内环境右环境 = 属性子字典.get('内环境右环境', '')
                        if 原内环境右环境 == '吉':
                            属性子字典['内环境右环境'] = '凶'
                        elif 原内环境右环境 == '凶':
                            属性子字典['内环境右环境'] = '吉'
                        if '+' in 月支旺弱状态 and '+' in 日支旺弱状态:
                            属性子字典['内环境右环境'] += '+'
                else:
                    # 普通情况
                    地支顺序 = ['年支', '月支', '日支', '时支']
                    同柱地支 = 窗口位置.replace('干', '支')
                    地支索引 = 地支顺序.index(同柱地支)
                    
                    if 地支索引 < len(地支顺序) - 1:
                        右侧地支位置 = 地支顺序[地支索引 + 1]
                        右侧地支旺弱状态 = self.八字信息主字典[右侧地支位置].get('旺弱状态', '')
                        
                        if '弱' in 右侧地支旺弱状态:
                            原内环境右环境 = 属性子字典.get('内环境右环境', '')
                            if 原内环境右环境 == '吉':
                                属性子字典['内环境右环境'] = '凶'
                            elif 原内环境右环境 == '凶':
                                属性子字典['内环境右环境'] = '吉'
                            if '+' in 右侧地支旺弱状态:
                                属性子字典['内环境右环境'] += '+'


                print(f"\n《原局未现十神外环境作用路径》：{未现外环境结论[天干名]['作用路径']}")
                print(f"\n《原局未现十神内环境作用路径》：{未现内环境结论[天干名]['作用路径']}")
                print(f"\n《原局未现十神左环境作用路径》：{未现左环境结论[天干名]['作用路径']}")
                print(f"\n《原局未现十神右环境作用路径》：{未现右环境结论[天干名]['作用路径']}")
                print(f"\n《原局未现十神内环境左环境作用路径》：{未现内环境左环境结论[天干名]['作用路径']}")
                print(f"\n《原局未现十神内环境右环境作用路径》：{未现内环境右环境结论[天干名]['作用路径']}")



                # 判断是否为实神
                是实神 = False
                if 大运干支[0] in self.大运天干字典:
                    是实神 = self.大运天干字典[大运干支[0]]['是否实神'] == '实神'
                
                print(f"\n《大运作用后未现十神的外环境结果》：∵【{大运干支}】大运{'(实神)' if 是实神 else ''}作用于原局后，使【{天干名}】【{十神}】状态为【{天干旺弱状态}】")
                print(f" ∴【{天干名}】【{十神}】外环境为【{属性子字典.get('外环境')}】")
                
                print(f"\n《大运作用后未现十神的内环境结果》：∵【{大运干支}】大运{'(实神)' if 是实神 else ''}作用于原局后，使【{窗口名字}】同柱地支【{同柱地支键}】状态为【{地支旺弱状态}】")
                print(f" ∴【{天干名}】【{十神}】内环境为【{属性子字典.get('内环境')}】")

                print(f"\n《大运作用后未现十神的左环境结果》：∵【{大运干支}】大运{'(实神)' if 是实神 else ''}作用于原局后，" + (f"使【日干】状态为【{日干旺弱状态}】，【月干】状态为【{月干旺弱状态}】" if 窗口位置 == '年干' else f"使左侧【{天干顺序[窗口索引 - 1] if 窗口索引 > 0 else '无'}】状态为【{左侧旺弱状态 if 窗口索引 > 0 else '无'}】"))
                print(f" ∴【{天干名}】【{十神}】左环境为【{属性子字典.get('左环境')}】")

                print(f"\n《大运作用后未现十神的右环境结果》：∵【{大运干支}】大运{'(实神)' if 是实神 else ''}作用于原局后，" + (f"使【月干】状态为【{月干旺弱状态}】，【日干】状态为【{日干旺弱状态}】" if 窗口位置 == '时干' else f"使右侧【{天干顺序[窗口索引 + 1] if 窗口索引 < len(天干顺序) - 1 else '无'}】状态为【{右侧旺弱状态 if 窗口索引 < len(天干顺序) - 1 else '无'}】"))
                print(f" ∴【{天干名}】【{十神}】右环境为【{属性子字典.get('右环境')}】")

                print(f"\n《大运作用后未现十神的内环境左环境结果》：∵【{大运干支}】大运{'(实神)' if 是实神 else ''}作用于原局后，" + (f"使【日支】状态为【{日支旺弱状态}】，【月支】状态为【{月支旺弱状态}】" if 窗口位置 == '年干' else f"使左侧地支【{左侧地支位置 if 地支索引 > 0 else '无'}】状态为【{左侧地支旺弱状态 if 地支索引 > 0 else '无'}】"))
                print(f" ∴【{天干名}】【{十神}】内环境左环境为【{属性子字典.get('内环境左环境')}】")

                print(f"\n《大运作用后未现十神的内环境右环境结果》：∵【{大运干支}】大运{'(实神)' if 是实神 else ''}作用于原局后，" + (f"使【月支】状态为【{月支旺弱状态}】，【日支】状态为【{日支旺弱状态}】" if 窗口位置 == '时干' else f"使右侧地支【{右侧地支位置 if 地支索引 < len(地支顺序) - 1 else '无'}】状态为【{右侧地支旺弱状态 if 地支索引 < len(地支顺序) - 1 else '无'}】"))
                print(f" ∴【{天干名}】【{十神}】内环境右环境为【{属性子字典.get('内环境右环境')}】")




            print("\n===🤠日干的环境 ===")
            日干信息 = self.八字信息主字典['日干']
            原始结论 = 判断日主自身状态()['作用路径说明']
            大运天干 = 大运干支[0]
            大运地支 = 大运干支[1]

            print(f"日干【{日干信息['名字']}】在【{大运干支}】作用后的环境：")

            # 外环境部分
            月干关系 = '生' if self.判断两者是否生扶受制(大运天干, '月干') == '生扶关系' else '制'
            时干关系 = '生' if self.判断两者是否生扶受制(大运天干, '时干') == '生扶关系' else '制'
            print(f"《原局日主外环境作用路径》：{原始结论['外环境说明']} \n《大运作用后 日主外环境的结果》： ∵【{大运干支}】大运作用于原局后，【{月干关系}】月干，【{时干关系}】时干， ∴日干的左环境为【{日干信息['左环境']}】，日干的右环境为【{日干信息['右环境']}】")

            # 内环境部分
            日支关系 = '生' if self.判断两者是否生扶受制(大运天干, '日支') == '生扶关系' else '制'
            print(f"《原局日主内环境作用路径》：{原始结论['内环境说明']} \n《大运作用后 日主内环境的结果》：∵【{大运干支}】大运作用于原局后，【{日支关系}】日支， ∴日干的内环境为【{日干信息['内环境']}】")

            # 内环境扩展部分
            月支关系 = '生' if self.判断两者是否生扶受制(大运地支, '月支') == '生扶关系' else '制'
            时支关系 = '生' if self.判断两者是否生扶受制(大运地支, '时支') == '生扶关系' else '制'
            print(f"《原局日主内环境的左环境/右环境作用路径》：{原始结论['内环境扩展说明']} \n《大运作用后 日主内环境的左环境/右环境的结果》：∵【{大运干支}】大运作用于原局后，【{月支关系}】月支，【{时支关系}】时支， ∴日干内环境的左环境为【{日干信息['内环境左环境']}】，日干内环境的右环境为【{日干信息['内环境右环境']}】")
            更新大运作用后的环境结论()

        def 处理大运流年共同作用():
            if not self.当前选中流年列表:
                print("请先选择流年！")
                return
            # 剩下逻辑保持不变，去掉和GUI直接相关的调用
            大运干支 = self.当前选中大运.split()[-1]
            大运天干 = 大运干支[0]
            大运地支 = 大运干支[1]
            大运天干属性 = self.大运天干字典[大运天干]
            大运天干属性['名字'] = 大运天干
            大运地支属性 = self.大运地支字典[大运地支]
            大运地支属性['名字'] = 大运地支

            for 位置 in ['年支', '月支', '日支', '时支']:
                地支属性 = self.八字信息主字典[位置]
                if 地支属性.get('是否空亡') == '空亡':
                    地支属性['旺弱状态'] = '不旺不弱'

            原局天干阴阳列表 = [self.八字信息主字典[位置]['阴阳属性'] for 位置 in ['年干', '月干', '日干', '时干']]
            if 原局天干阴阳列表.count('阴') == 4:
                原局属性 = '全阴'
            elif 原局天干阴阳列表.count('阳') == 4:
                原局属性 = '全阳'
            else:
                原局属性 = '有阴有阳'

            for 流年信息 in self.当前选中流年列表:
                流年干支 = 流年信息.split()[-1]
                流年天干 = 流年干支[0]
                流年地支 = 流年干支[1]
                流年天干属性 = 流年天干字典[流年天干]
                流年天干属性['名字'] = 流年天干
                流年地支属性 = 流年地支字典[流年地支]
                流年地支属性['名字'] = 流年地支

                大运天干实虚 = 大运天干属性['是否实神']
                流年天干实虚 = 流年天干属性['是否实神']
                大运地支实虚 = 大运地支属性['是否实神']
                流年地支实虚 = 流年地支属性['是否实神']
                大运地支空亡 = 大运地支属性.get('是否空亡', '不空亡')
                流年地支空亡 = 流年地支属性.get('是否空亡', '不空亡')

                if 大运天干实虚 == '实神' or 流年天干实虚 == '实神':
                    处理实神天干(大运天干属性, 流年天干属性)
                else:
                    处理天干阴阳(原局属性, 大运天干属性, 流年天干属性)

                if 大运地支实虚 == '实神' or 流年地支实虚 == '实神':
                    处理实神地支(大运地支属性, 流年地支属性)
                elif 大运地支空亡 == '空亡' or 流年地支空亡 == '空亡':
                    处理地支空亡(大运地支属性, 流年地支属性)
                else:
                    处理地支阴阳(原局属性, 大运地支属性, 流年地支属性)

                天干作用原局(大运天干属性)
                天干作用原局(流年天干属性)

                for 位置 in ['年支', '月支', '日支', '时支']:
                    原局地支属性 = self.八字信息主字典[位置]
                    if 原局地支属性.get('是否空亡') != '空亡':
                        判断地支作用(大运地支属性, 流年地支属性, 原局地支属性)

                更新大运流年共同作用后的环境吉凶结论(大运干支, 流年干支)

            print(f"处理完毕：{流年信息}的环境吉凶已更新。")

        def 更新大运流年共同作用后的环境吉凶结论():
            import contextlib
            if not self.当前选中流年列表:
                print("请先选择流年！")
                return
            大运干支 = self.当前选中大运.split()[-1]
            流年信息 = self.当前选中流年列表[-1]
            流年干支 = 流年信息.split()[-1]  # 获取干支部分
            print(f"👼👼👼\n【大运:{大运干支} +流年:{流年干支}】大运作用到原局后，原局各种环境的结论如下：")
            with contextlib.redirect_stdout(None):
                外环境结论 = 分析天干十神的外环境吉凶()
                内环境结论 = 分析天干十神的内环境吉凶()
                左环境结论 = 分析天干十神的左环境吉凶()
                右环境结论 = 分析天干十神的右环境吉凶()
                内环境左环境结论 = 分析天干十神的内环境的左环境吉凶()
                内环境右环境结论 = 分析天干十神的内环境右环境吉凶()
        
            for 位置 in ['时干', '月干', '年干']:  # 不包含日干
                天干信息 = self.八字信息主字典[位置]
                if '干' not in 位置:
                    continue

            print("\n=== 😐 已现十神的环境 ===")
            with contextlib.redirect_stdout(None):   # 1. 先获取环境结论
                外环境结论 = 分析天干十神的外环境吉凶()
                内环境结论 = 分析天干十神的内环境吉凶()
                左环境结论 = 分析天干十神的左环境吉凶()
                右环境结论 = 分析天干十神的右环境吉凶()
                内环境左环境结论 = 分析天干十神的内环境的左环境吉凶()
                内环境右环境结论 = 分析天干十神的内环境右环境吉凶()
            
            天干顺序 = ['年干', '月干', '时干']      # 2. 处理各个位置的环境
            for 位置 in 天干顺序:
                天干信息 = self.八字信息主字典[位置]
                同柱地支键 = 位置.replace('干', '支')
                地支旺弱状态 = self.八字信息主字典[同柱地支键].get('旺弱状态', '')
                旺弱状态 = 天干信息.get('旺弱状态', '')

                # 打印环境结论
                print(f"\n《原局已现十神外环境作用路径》：{外环境结论[位置]['作用路径']}")
                print(f"\n《原局已现十神内环境作用路径》：{内环境结论[位置]['作用路径']}")
                print(f"\n《原局已现十神左环境作用路径》：{左环境结论[位置]['作用路径']}")
                print(f"\n《原局已现十神右环境作用路径》：{右环境结论[位置]['作用路径']}")
                print(f"\n《原局已现十神内环境左环境作用路径》：{内环境左环境结论[位置]['作用路径']}")
                print(f"\n《原局已现十神内环境右环境作用路径》：{内环境右环境结论[位置]['作用路径']}")
                
                # 处理外环境
                if '弱' in 旺弱状态:
                    原外环境 = 天干信息.get('外环境')
                    if 原外环境 in ['吉', '凶']:
                        新环境 = '凶' if 原外环境 == '吉' else '吉'
                        天干信息['外环境'] = 新环境 + '+' if '+' in 旺弱状态 else 新环境
                        
                # 处理内环境
                if 地支旺弱状态 and '弱' in 地支旺弱状态:
                    原内环境 = 天干信息.get('内环境')
                    if 原内环境 in ['吉', '凶']:
                        新环境 = '凶' if 原内环境 == '吉' else '吉'
                        天干信息['内环境'] = 新环境 + '+' if '+' in 地支旺弱状态 else 新环境

                # 处理左环境
                if 地支旺弱状态 and '弱' in 旺弱状态:
                    原左环境 = 天干信息.get('左环境')
                    if 原左环境 in ['吉', '凶']:
                        新环境 = '凶' if 原左环境 == '吉' else '吉'
                        天干信息['左环境'] = 新环境 + '+' if '+' in 旺弱状态 else 新环境
                
                # 处理右环境
                if 地支旺弱状态 and '弱' in 旺弱状态:
                    原右环境 = 天干信息.get('右环境')
                    if 原右环境 in ['吉', '凶']:
                        新环境 = '凶' if 原右环境 == '吉' else '吉'
                        天干信息['右环境'] = 新环境 + '+' if '+' in 旺弱状态 else 新环境
                
                # 处理内环境左环境
                if 地支旺弱状态 and '弱' in 地支旺弱状态:
                    原内环境左环境 = 天干信息.get('内环境左环境')
                    if 原内环境左环境 in ['吉', '凶']:
                        新环境 = '凶' if 原内环境左环境 == '吉' else '吉'
                        天干信息['内环境左环境'] = 新环境 + '+' if '+' in 地支旺弱状态 else 新环境
                    
                # 处理内环境右环境
                if 地支旺弱状态 and '弱' in 地支旺弱状态:
                    原内环境右环境 = 天干信息.get('内环境右环境')
                    if 原内环境右环境 in ['吉', '凶']:
                        新环境 = '凶' if 原内环境右环境 == '吉' else '吉'
                        天干信息['内环境右环境'] = 新环境 + '+' if '+' in 地支旺弱状态 else 新环境


                # 4. 处理环境变化
                天干名字 = 天干信息['名字']
                十神 = 天干信息['十神']
                
                print(f"\n《大运流年作用后的外环境结果》：∵【{大运干支}】大运和【{流年干支}】流年作用于原局后，使【{位置}】【{天干名字}】【{十神}】状态为【{旺弱状态}】，∴外环境为【{天干信息['外环境']}】")
                print(f"\n《大运流年作用后的内环境结果》：∵【{大运干支}】大运和【{流年干支}】流年作用于原局后，使【{同柱地支键}】状态为【{地支旺弱状态}】，∴内环境为【{天干信息['内环境']}】")
                print(f"\n《大运流年作用后的左环境结果》：∵【{大运干支}】大运和【{流年干支}】流年作用于原局后，使【{位置}】【{天干名字}】【{十神}】状态为【{旺弱状态}】，∴左环境为【{天干信息['左环境']}】")
                print(f"\n《大运流年作用后的右环境结果》：∵【{大运干支}】大运和【{流年干支}】流年作用于原局后，使【{位置}】【{天干名字}】【{十神}】状态为【{旺弱状态}】，∴右环境为【{天干信息['右环境']}】")
                print(f"\n《大运流年作用后的内环境左环境结果》：∵【{大运干支}】大运和【{流年干支}】流年作用于原局后，使【{同柱地支键}】状态为【{地支旺弱状态}】，∴内环境左环境为【{天干信息['内环境左环境']}】")
                print(f"\n《大运流年作用后的内环境右环境结果》：∵【{大运干支}】大运和【{流年干支}】流年作用于原局后，使【{同柱地支键}】状态为【{地支旺弱状态}】，∴内环境右环境为【{天干信息['内环境右环境']}】")



            print("\n=== 🫥 未现十神的环境 ===")
            with contextlib.redirect_stdout(None):
                未现外环境结论 = 分析未现天干十神的外环境吉凶()
                未现内环境结论 = 分析未现天干十神的内环境吉凶()
                未现左环境结论 = 分析未现天干十神的左环境吉凶()
                未现右环境结论 = 分析未现天干十神的右环境吉凶()
                未现内环境左环境结论 = 分析未现天干十神的内环境的左环境()
                未现内环境右环境结论 = 分析未现天干十神的内环境的右环境()
            # 获取所有未现十神的列表
            未现十神列表 = list(self.未现正偏十神主字典.keys())

            for 天干名 in 未现十神列表:
                属性子字典 = self.未现正偏十神主字典[天干名]
                窗口名字 = 属性子字典.get('窗口名字')
                十神 = 属性子字典.get('十神')
                窗口位置 = next((位置 for 位置, 信息 in self.八字信息主字典.items() if 信息.get('名字') == 窗口名字), None)
                
                if not 窗口位置:
                    continue

                # 获取天干和地支的旺弱状态
                天干旺弱状态 = self.八字信息主字典[窗口位置].get('旺弱状态', '')
                地支位置 = 窗口位置.replace('干', '支')
                地支旺弱状态 = self.八字信息主字典[地支位置].get('旺弱状态', '')

                # 处理外环境和内环境
                for 环境类型, 参考状态 in [('外环境', 天干旺弱状态), ('内环境', 地支旺弱状态)]:
                    if '弱' in 参考状态 and 属性子字典.get(环境类型) in ['吉', '凶']:
                        属性子字典[环境类型] = '凶' if 属性子字典[环境类型] == '吉' else '吉'
                        if '+' in 参考状态:
                            属性子字典[环境类型] += '+'

                # 处理左右环境
                天干顺序 = ['年干', '月干', '日干', '时干']
                窗口索引 = 天干顺序.index(窗口位置)

                # 特殊位置处理（年干和时干）
                特殊位置处理 = {
                    '年干': ('左环境', ['月干', '日干']),
                    '时干': ('右环境', ['月干', '日干'])
                }

                if 窗口位置 in 特殊位置处理:
                    环境类型, 参考位置列表 = 特殊位置处理[窗口位置]
                    if all('弱' in self.八字信息主字典[位置].get('旺弱状态', '') for 位置 in 参考位置列表):
                        原环境 = 属性子字典.get(环境类型, '')
                        if 原环境 in ['吉', '凶']:
                            属性子字典[环境类型] = '凶' if 原环境 == '吉' else '吉'
                            if all('+' in self.八字信息主字典[位置].get('旺弱状态', '') for 位置 in 参考位置列表):
                                属性子字典[环境类型] += '+'
                else:
                    # 普通位置处理
                    for 环境类型, 偏移 in [('左环境', -1), ('右环境', 1)]:
                        相邻索引 = 窗口索引 + 偏移
                        if 0 <= 相邻索引 < len(天干顺序):
                            相邻位置 = 天干顺序[相邻索引]
                            相邻旺弱状态 = self.八字信息主字典[相邻位置].get('旺弱状态', '')
                            if '弱' in 相邻旺弱状态 and 属性子字典.get(环境类型) in ['吉', '凶']:
                                属性子字典[环境类型] = '凶' if 属性子字典[环境类型] == '吉' else '吉'
                                if '+' in 相邻旺弱状态:
                                    属性子字典[环境类型] += '+'

                # 处理内环境的左右环境
                地支顺序 = ['年支', '月支', '日支', '时支']
                地支索引 = 地支顺序.index(地支位置)

                # 特殊位置处理（年支和时支的内环境左右环境）
                特殊地支处理 = {'年支': ('内环境左环境', ['月支', '日支']),
                    '时支': ('内环境右环境', ['月支', '日支'])}

                if 地支位置 in 特殊地支处理:
                    环境类型, 参考位置列表 = 特殊地支处理[地支位置]
                    if all('弱' in self.八字信息主字典[位置].get('旺弱状态', '') for 位置 in 参考位置列表):
                        原环境 = 属性子字典.get(环境类型, '')
                        if 原环境 in ['吉', '凶']:
                            属性子字典[环境类型] = '凶' if 原环境 == '吉' else '吉'
                            if all('+' in self.八字信息主字典[位置].get('旺弱状态', '') for 位置 in 参考位置列表):
                                属性子字典[环境类型] += '+'
                else:
                    # 普通位置处理
                    for 环境类型, 偏移 in [('内环境左环境', -1), ('内环境右环境', 1)]:
                        相邻索引 = 地支索引 + 偏移
                        if 0 <= 相邻索引 < len(地支顺序):
                            相邻位置 = 地支顺序[相邻索引]
                            相邻旺弱状态 = self.八字信息主字典[相邻位置].get('旺弱状态', '')
                            if '弱' in 相邻旺弱状态 and 属性子字典.get(环境类型) in ['吉', '凶']:
                                属性子字典[环境类型] = '凶' if 属性子字典[环境类型] == '吉' else '吉'
                                if '+' in 相邻旺弱状态:
                                    属性子字典[环境类型] += '+'

                # 打印结果
                print(f"\n《大运流年作用后未现十神的外环境结果》：∵【{大运干支}】大运和【{流年干支}】流年作用于原局后，使【{窗口位置}】状态为【{天干旺弱状态}】，∴【{天干名}】【{十神}】外环境为【{属性子字典.get('外环境')}】")
                print(f"\n《大运流年作用后未现十神的内环境结果》：∵【{大运干支}】大运和【{流年干支}】流年作用于原局后，使【{地支位置}】状态为【{地支旺弱状态}】，∴【{天干名}】【{十神}】内环境为【{属性子字典.get('内环境')}】")
                
                左环境信息 = "使【月干】状态为【{}】，【日干】状态为【{}】".format(self.八字信息主字典['月干'].get('旺弱状态', ''), self.八字信息主字典['日干'].get('旺弱状态', '')
                ) if 窗口位置 == '年干' else "使左侧【{}】状态为【{}】".format(
                    天干顺序[窗口索引 - 1] if 窗口索引 > 0 else '无',
                    self.八字信息主字典.get(天干顺序[窗口索引 - 1], {}).get('旺弱状态', '无') if 窗口索引 > 0 else '无'
                )
                print(f"\n《大运流年作用后未现十神的左环境结果》：∵【{大运干支}】大运和【{流年干支}】流年作用于原局后，{左环境信息}，∴【{天干名}】【{十神}】左环境为【{属性子字典.get('左环境')}】")

                右环境信息 = "使【月干】状态为【{}】，【日干】状态为【{}】".format(
                    self.八字信息主字典['月干'].get('旺弱状态', ''),
                    self.八字信息主字典['日干'].get('旺弱状态', '')
                ) if 窗口位置 == '时干' else "使右侧【{}】状态为【{}】".format(
                    天干顺序[窗口索引 + 1] if 窗口索引 < len(天干顺序) - 1 else '无',
                    self.八字信息主字典.get(天干顺序[窗口索引 + 1], {}).get('旺弱状态', '无') if 窗口索引 < len(天干顺序) - 1 else '无'
                )
                print(f"\n《大运流年作用后未现十神的右环境结果》：∵【{大运干支}】大运和【{流年干支}】流年作用于原局后，{右环境信息}，∴【{天干名}】【{十神}】右环境为【{属性子字典.get('右环境')}】")

                内环境左环境信息 = "使【日支】状态为【{}】，【月支】状态为【{}】".format(
                    self.八字信息主字典['日支'].get('旺弱状态', ''),
                    self.八字信息主字典['月支'].get('旺弱状态', '')
                ) if 地支位置 == '年支' else "使左侧地支【{}】状态为【{}】".format(
                    地支顺序[地支索引 - 1] if 地支索引 > 0 else '无',
                    self.八字信息主字典.get(地支顺序[地支索引 - 1], {}).get('旺弱状态', '无') if 地支索引 > 0 else '无'
                )
                print(f"\n《大运流年作用后未现十神的内环境左环境结果》：∵【{大运干支}】大运和【{流年干支}】流年作用于原局后，{内环境左环境信息}，∴【{天干名}】【{十神}】内环境左环境为【{属性子字典.get('内环境左环境')}】")

                内环境右环境信息 = "使【月支】状态为【{}】，【日支】状态为【{}】".format(
                    self.八字信息主字典['月支'].get('旺弱状态', ''),
                    self.八字信息主字典['日支'].get('旺弱状态', '')
                ) if 地支位置 == '时支' else "使右侧地支【{}】状态为【{}】".format(
                    地支顺序[地支索引 + 1] if 地支索引 < len(地支顺序) - 1 else '无',
                    self.八字信息主字典.get(地支顺序[地支索引 + 1], {}).get('旺弱状态', '无') if 地支索引 < len(地支顺序) - 1 else '无'
                )
                print(f"\n《大运流年作用后未现十神的内环境右环境结果》：∵【{大运干支}】大运和【{流年干支}】流年作用于原局后，{内环境右环境信息}，∴【{天干名}】【{十神}】内环境右环境为【{属性子字典.get('内环境右环境')}】")

            print("\n===🤠日干的环境 ===")
            日干信息 = self.八字信息主字典['日干']
            原始结论 = 判断日主自身状态()['作用路径说明']
            
            # 获取大运和流年的干支
            大运天干, 大运地支 = 大运干支[0], 大运干支[1]
            流年天干, 流年地支 = 流年干支[0], 流年干支[1]
            
            # 定义生制关系获取函数
            def 获取生制关系(作用干支, 被作用位置):
                return '生' if self.判断两者是否生扶受制(作用干支, 被作用位置) == '生扶关系' else '制'
            
            # 获取各个位置的关系
            关系信息 = {
                '月干': (获取生制关系(大运天干, '月干'), 获取生制关系(流年天干, '月干')),
                '时干': (获取生制关系(大运天干, '时干'), 获取生制关系(流年天干, '时干')),
                '日支': (获取生制关系(大运天干, '日支'), 获取生制关系(流年天干, '日支')),
                '月支': (获取生制关系(大运地支, '月支'), 获取生制关系(流年地支, '月支')),
                '时支': (获取生制关系(大运地支, '时支'), 获取生制关系(流年地支, '时支'))
            }
            
            # 打印环境信息
            print(f"\n《原局日主外环境作用路径》：{原始结论['外环境说明']} \n\n《大运流年作用后日主外环境的结果》：∵【{大运干支}】大运和【{流年干支}】流年作用于原局后，大运【{关系信息['月干'][0]}】月干，【{关系信息['时干'][0]}】时干，流年【{关系信息['月干'][1]}】月干，【{关系信息['时干'][1]}】时干，∴日干的左环境为【{日干信息['左环境']}】，日干的右环境为【{日干信息['右环境']}】")
            
            print(f"\n《原局日主内环境作用路径》：{原始结论['内环境说明']} \n\n《大运流年作用后日主内环境的结果》：∵【{大运干支}】大运和【{流年干支}】流年作用于原局后，大运【{关系信息['日支'][0]}】日支，流年【{关系信息['日支'][1]}】日支，∴日干的内环境为【{日干信息['内环境']}】")
            
            print(f"\n《原局日主内环境的左环境/右环境作用路径》：{原始结论['内环境扩展说明']} \n\n《大运流年作用后日主内环境的左环境/右环境的结果》：∵【{大运干支}】大运和【{流年干支}】流年作用于原局后，大运【{关系信息['月支'][0]}】月支，【{关系信息['时支'][0]}】时支，流年【{关系信息['月支'][1]}】月支，【{关系信息['时支'][1]}】时支，∴日干内环境的左环境为【{日干信息['内环境左环境']}】，日干内环境的右环境为【{日干信息['内环境右环境']}】")

        def 处理实神天干(大运天干属性, 流年天干属性):
            if 大运天干属性['是否实神'] == '实神' and 流年天干属性['是否实神'] == '实神':
                # 情况8：实神和实神
                流年天干属性['旺弱状态'] = '旺+'
                天干作用原局(流年天干属性)
            else:
                # 情况7：一个实神，一个虚神
                if 大运天干属性['是否实神'] == '实神':
                    更新旺弱状态(流年天干属性, 大运天干属性)
                    天干作用原局(大运天干属性)
                else:
                    更新旺弱状态(大运天干属性, 流年天干属性)
                    天干作用原局(流年天干属性)

        def 处理实神地支(大运地支属性, 流年地支属性):
            if 大运地支属性['是否实神'] == '实神' and 流年地支属性['是否实神'] == '实神':
                流年地支属性['旺弱状态'] = '旺+'
                地支作用原局(流年地支属性)
            else:
                if 大运地支属性['是否实神'] == '实神':
                    更新旺弱状态(流年地支属性, 大运地支属性)
                    大运地支属性['旺弱状态'] += '+'
                    地支作用原局(大运地支属性)
                else:
                    更新旺弱状态(大运地支属性, 流年地支属性)
                    流年地支属性['旺弱状态'] += '+'
                    地支作用原局(流年地支属性)

        def 处理天干阴阳(原局属性, 大运天干属性, 流年天干属性):
            大运对流年关系 = self.判断两者是否生扶受制(大运天干属性['名字'], 流年天干属性['名字'])
            流年对大运关系 = self.判断两者是否生扶受制(流年天干属性['名字'], 大运天干属性['名字'])
            
            # 设置大运天干的旺弱状态
            if 流年对大运关系 == '生扶关系':
                大运天干属性['旺弱状态'] = '旺'
            elif 流年对大运关系 == '受制关系':
                大运天干属性['旺弱状态'] = '弱'
            else:
                大运天干属性['旺弱状态'] = '不旺不弱'
                
            # 设置流年天干的旺弱状态
            if 大运对流年关系 == '生扶关系':
                流年天干属性['旺弱状态'] = '旺'
            elif 大运对流年关系 == '受制关系':
                流年天干属性['旺弱状态'] = '弱'
            else:
                流年天干属性['旺弱状态'] = '不旺不弱'

            if 原局属性 == '全阴':
                if 大运天干属性['阴阳属性'] != 流年天干属性['阴阳属性']:
                    if 大运天干属性['阴阳属性'] == '阳':
                        更新旺弱状态(大运天干属性, 流年天干属性)
                        天干作用原局(流年天干属性)
                    else:
                        更新旺弱状态(流年天干属性, 大运天干属性)
                        天干作用原局(大运天干属性)
            elif 原局属性 == '全阳':
                if 大运天干属性['阴阳属性'] != 流年天干属性['阴阳属性']:
                    if 大运天干属性['阴阳属性'] == '阴':
                        更新旺弱状态(大运天干属性, 流年天干属性)
                        天干作用原局(流年天干属性)
                    else:
                        更新旺弱状态(流年天干属性, 大运天干属性)
                        天干作用原局(大运天干属性)
            else:
                # 原局有阴有阳
                for 位置 in ['年干', '月干', '日干', '时干']:
                    原局天干属性 = self.八字信息主字典[位置]
                    原局阴阳 = 原局天干属性['阴阳属性']
                    for 天干属性 in [大运天干属性, 流年天干属性]:
                        if 天干属性['阴阳属性'] == 原局阴阳:
                            更新旺弱状态(天干属性, 原局天干属性)

        def 处理地支阴阳(原局属性, 大运地支属性, 流年地支属性):
            大运对流年关系 = self.判断两者是否生扶受制(大运地支属性['名字'], 流年地支属性['名字'])    # 先判断大运地支和流年地支的关系
            流年对大运关系 = self.判断两者是否生扶受制(流年地支属性['名字'], 大运地支属性['名字'])
            # 设置大运地支的旺弱状态
            if 流年对大运关系 == '生扶关系':
                大运地支属性['旺弱状态'] = '旺'
            elif 流年对大运关系 == '受制关系':
                大运地支属性['旺弱状态'] = '弱'
            else:
                大运地支属性['旺弱状态'] = '不旺不弱'
            # 设置流年地支的旺弱状态
            if 大运对流年关系 == '生扶关系':
                流年地支属性['旺弱状态'] = '旺'
            elif 大运对流年关系 == '受制关系':
                流年地支属性['旺弱状态'] = '弱'
            else:
                流年地支属性['旺弱状态'] = '不旺不弱'

            if 原局属性 == '全阴':
                if 大运地支属性['阴阳属性'] != 流年地支属性['阴阳属性']:
                    if 大运地支属性['阴阳属性'] == '阳':
                        更新旺弱状态(大运地支属性, 流年地支属性)
                        地支作用原局(流年地支属性)
                    else:
                        更新旺弱状态(流年地支属性, 大运地支属性)
                        地支作用原局(大运地支属性)
            elif 原局属性 == '全阳':
                if 大运地支属性['阴阳属性'] != 流年地支属性['阴阳属性']:
                    if 大运地支属性['阴阳属性'] == '阴':
                        更新旺弱状态(大运地支属性, 流年地支属性)
                        地支作用原局(流年地支属性)
                    else:
                        更新旺弱状态(流年地支属性, 大运地支属性)
                        地支作用原局(大运地支属性)
            else:
                # 原局有阴有阳
                for 地支属性 in [大运地支属性, 流年地支属性]:
                    for 位置 in ['年支', '月支', '日支', '时支']:
                        原局地支属性 = self.八字信息主字典[位置]
                        if 原局地支属性.get('是否空亡') == '空亡':
                            原局地支属性['旺弱状态'] = '不旺不弱'
                            continue
                        if 地支属性['阴阳属性'] == 原局地支属性['阴阳属性']:
                            更新旺弱状态(地支属性, 原局地支属性)

        def 处理地支空亡(大运地支属性, 流年地支属性):
            if 大运地支属性.get('是否空亡') == '空亡':
                大运地支属性['旺弱状态'] = '不旺不弱'
                if 流年地支属性.get('是否空亡') != '空亡':
                    反转结论(流年地支属性)
            elif 流年地支属性.get('是否空亡') == '空亡':
                流年地支属性['旺弱状态'] = '不旺不弱'
                反转结论(大运地支属性)

        def 判断地支作用(大运地支属性, 流年地支属性, 原局地支属性):
            if 原局地支属性.get('是否空亡') == '空亡':   # 如果原局地支是空亡，直接返回不旺不弱
                原局地支属性['旺弱状态'] = '不旺不弱'
                return
            大运对原局关系 = self.判断两者是否生扶受制(大运地支属性['名字'], 原局地支属性['名字'])    # 获取作用关系
            流年对原局关系 = self.判断两者是否生扶受制(流年地支属性['名字'], 原局地支属性['名字'])
            
            需要反转 = (大运地支属性.get('是否空亡') == '空亡' or 流年地支属性.get('是否空亡') == '空亡')  # 判断是否需要反转结果（当大运或流年地支是空亡时）
            
            if 大运对原局关系 == '生扶关系' or 流年对原局关系 == '生扶关系':   # 确定基础状态
                基础状态 = '旺' if not 需要反转 else '弱'
            elif 大运对原局关系 == '受制关系' or 流年对原局关系 == '受制关系':
                基础状态 = '弱' if not 需要反转 else '旺'
            else:
                基础状态 = '不旺不弱'

            原局地支属性['旺弱状态'] = 基础状态

            if 基础状态 == '弱':     # 反转结论如果状态是弱
                反转结论(原局地支属性)

        def 反转结论(属性字典):
            原结论 = 属性字典.get('环境结论', '')
            if 原结论 == '吉':
                属性字典['环境结论'] = '凶'
            elif 原结论 == '凶':
                属性字典['环境结论'] = '吉'

        def 更新旺弱状态(作用者属性, 被作用者属性):
            关系 = self.判断两者是否生扶受制(作用者属性['名字'], 被作用者属性['名字'])
            是同性 = 作用者属性['阴阳属性'] == 被作用者属性['阴阳属性']
            if 关系 == '生扶关系':
                基础状态 = '旺' if 是同性 else '弱'
            elif 关系 == '受制关系':
                基础状态 = '弱' if 是同性 else '旺'
            else:
                基础状态 = '不旺不弱'
            if 作用者属性['是否实神'] == '实神':
                基础状态 += '+'
            被作用者属性['旺弱状态'] = 基础状态
    
            if 基础状态.startswith('弱'):   # 反转结论如果状态是弱
                反转结论(被作用者属性)

        def 天干作用原局(天干属性):
            for 位置 in ['年干', '月干', '日干', '时干']:
                原局天干属性 = self.八字信息主字典[位置]
                更新旺弱状态(天干属性, 原局天干属性)

        def 地支作用原局(地支属性):
            for 位置 in ['年支', '月支', '日支', '时支']:
                原局地支属性 = self.八字信息主字典[位置]
                if 原局地支属性.get('是否空亡') == '空亡':
                    原局地支属性['旺弱状态'] = '不旺不弱'
                    continue
                更新旺弱状态(地支属性, 原局地支属性)
    





        def 发送到Coze的API(文本):
            import requests
            import json
            import time
            session = requests.Session() # 创建新的会话
            # Coze的API配置信息
            bot_id = "7430070428481470472"  # 你的机器人ID
            api_token = "pat_N0P8ThAsnNn7RhlWQXKHJamRR1fqmE6jZRgGzPdxTwpudzbUsjm0gL7SV1j5ksvK"  # 你的API令牌
            api_url = "https://api.coze.com/v3/chat"  # 官方提供的API地址
            # 设置请求头
            headers = {"Authorization": f"Bearer {api_token}", "Content-Type": "application/json"}
            # 设置请求体，按照官方文档示例
            message = {"bot_id": bot_id, "user_id": f"user_{int(time.time())}", "stream": True, "auto_save_history": False,
                "additional_messages": [{"role": "user","content": 文本, "content_type": "text"}]}
            try:  # 发送POST请求，启用流式响应
                response = session.post(api_url, headers=headers, json=message, stream=True)
                print(f"状态码: {response.status_code}")
                if response.status_code == 200:
                    print("⌛ 正在等待bot生成完整回复...")
                    time.sleep(20)  # 先等待20秒,让bot充分思考和生成
                    full_response = ""
                    for line in response.iter_lines():
                        if line:
                            line = line.decode('utf-8')
                            if line.startswith("data:"):
                                try:
                                    json_str = line.replace("data:", "").strip()
                                    data = json.loads(json_str)
                                    if isinstance(data, dict):
                                        if data.get("type") == "answer":
                                            content = data.get("content", "")
                                            if content:
                                                full_response = content  # 直接替换而不是追加
                                except json.JSONDecodeError:
                                    continue             
                    return full_response.strip() if full_response else None
                else:
                    print(f"请求失败, 错误代码: {response.status_code}")
                    print(f"错误信息: {response.text}")
                    return None  # 添加返回
            except requests.exceptions.RequestException as e:
                print(f"网络请求错误: {str(e)}")
                return None  # 添加返回
            except Exception as e:
                print(f"其他错误: {str(e)}")
                return None  # 添加返回
            finally:
                session.close()   # 确保会话被关闭



        def 筛选断语(主题="投资"):
            if 主题 == "投资":
                关键词 = ["【偏财】"]
                筛选结果 = [句子 for 句子 in self.所有断语 if any(关键词 in 句子 for 关键词 in 关键词)]
                print("\n" + "="*50)  # 添加分隔线
                print(f"📄📄📄📄📄📄本轮“投资”主题的逻辑链句子有以下：")
                for 句子 in 筛选结果:
                    print(句子)
                print("="*50 + "\n")  # 添加分隔线

                # 提取核心逻辑并直接添加到筛选结果中
                for 句子 in 筛选结果.copy():  # 使用copy()避免在遍历时修改列表
                    if "推导过程：" in 句子:
                        if "【日干】" in 句子 or "【日支】" in 句子:
                            主体 = "【日干】" if "【日干】" in 句子 else "【日支】"
                            结果 = "【吉】" if "【吉】" in 句子 else "【凶】"
                            日干支作用的简化句子 = f"{主体}让{关键词[0]}{结果}"
                            筛选结果.append(日干支作用的简化句子)  # 直接添加到筛选结果中
                # 合并所有句子
                所有筛选句子 = "\n".join(筛选结果)
                print("\n 正在连接Coze机器人 请稍候...⌛")
                coze回复 = 发送到Coze的API(f"根据命主八字生成的关于【投资】主体作用链路的句子如下，请对核心内容进行筛选与精简，针对【投资】给出断语：\n{所有筛选句子}")
                if coze回复:
                    print("\n🤖🤖🤖🤖🤖 Coze分析结果:")
                    print(coze回复)
                else:
                    print("❌ 获取分析结果失败，请稍后重试")

        logger.debug("[BaziPlugin] 命盘分析完成")
        return self.本命盘四个天干名字列表,self.本命盘四个地支名字列表
